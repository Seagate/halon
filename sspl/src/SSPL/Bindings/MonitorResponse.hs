{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE StandaloneDeriving #-}

module SSPL.Bindings.MonitorResponse where

import           SSPL.Bindings.Instances

import           Control.Applicative
import           Control.Monad
import           Data.Aeson
import           Data.Aeson.Schema.Choice
import           Data.Aeson.Schema.Types
import           Data.Aeson.Schema.Validator
import           Data.Aeson.Types
import           Data.Binary
import           Data.Either
import           Data.Functor
import           Data.Hashable               (Hashable)
import           Data.HashMap.Lazy
import           Data.List
import           Data.Map
import           Data.Maybe
import           Data.Scientific
import           Data.Text
import           Data.Traversable
import           Data.Typeable               (Typeable)
import           Data.Vector
import           Data.Vector.Binary          ()
import           GHC.Base
import           GHC.Classes
import           GHC.Generics                (Generic)
import           GHC.Num
import           GHC.Show
import           Prelude

graph :: Data.Aeson.Schema.Types.Graph Data.Aeson.Schema.Types.Schema
                                       Data.Text.Text

graph = Data.Map.fromList [(Data.Text.pack "MonitorResponse",
                            Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                          Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "monitor_msg_type",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "host_update",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "runningProcessCount",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Total Number of Running Processes")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "ifData",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaItems = Data.Maybe.Just (Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "trafficIn",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "networkErrors",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "trafficOut",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "droppedPacketsIn",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Data.Text.pack "packetsIn",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "dopppedPacketsOut",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Data.Text.pack "ifId ",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType]}),
ata.Text.pack "packetsOut",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]})]}),
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaMinItems = 1,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Network Interface Data")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "uname",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "OS System Information")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "upTime",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Time Since Host Was Started in Secs")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "localMountData",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "totalSwap",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeSpace",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "totalSpace",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeInodes",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeSwap",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)]})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Local Mount Data")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "freeMem",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "units",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty)],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Amount of Free Memory")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "loggedInUsers",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "List of logged in users")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "totalMem",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "units",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty)],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Total Memory Available")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "processCount",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Total Number of Processes")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "bootTime",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Time Since Host Was Started")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "cpuData",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "userTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "stealTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "systemTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "csps",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "softirqTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "idleTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "niceTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "interruptTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "iowaitTime ",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "coreData",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaItems = Data.Maybe.Just (Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
ata.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "ips",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "load1MinAvg",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (Data.Text.pack "load15MinAvg",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "coreId",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "load5MinAvg",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]})]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaMinItems = 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "CPU Core Data")})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "CPU Data")})]}),
                                                                                                                                                                                                                                       (Data.Text.pack "disk_status_drivemanager",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "enclosureSN",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Enclosure Serial Number")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "diskNum",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.NumberType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Drive Number within the enclosure")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "diskStatus",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = Data.Maybe.Just (Data.Text.pack "Disk Status")})]})],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True}),
                                                                                                                                 (Data.Text.pack "sspl_ll_msg_header",
                                                                                                                                  Data.Aeson.Schema.Types.empty)],
                                                          Data.Aeson.Schema.Types.schemaDSchema = Data.Maybe.Just (Data.Text.pack "http://json-schema.org/draft-03/schema#")})]

data MonitorResponseMonitor_msg_typeHost_updateIfDataItem = MonitorResponseMonitor_msg_typeHost_updateIfDataItem
  { monitorResponseMonitor_msg_typeHost_updateIfDataItemTrafficIn         :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemNetworkErrors     :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemTrafficOut        :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemDroppedPacketsIn  :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemPacketsIn         :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemDopppedPacketsOut :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemIfId              :: Data.Maybe.Maybe Data.Text.Text
  , monitorResponseMonitor_msg_typeHost_updateIfDataItemPacketsOut        :: Data.Maybe.Maybe Prelude.Integer
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateIfDataItem

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateIfDataItem
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((((Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateIfDataItem Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                           Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                              Data.Either.Right i -> do GHC.Base.return i
                                                                                                                                                                                                                                              _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                           _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "trafficIn") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                               Data.Either.Right i_1 -> do GHC.Base.return i_1
                                                                                                                                                                                                                                                                                                                                                                                                               _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                                                            _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "networkErrors") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_2 -> do GHC.Base.return i_2
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "trafficOut") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_3 -> do GHC.Base.return i_3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      _ -> GHC.Base.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "droppedPacketsIn") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_4 -> do GHC.Base.return i_4
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "packetsIn") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_5 -> do GHC.Base.return i_5
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               _ -> GHC.Base.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "dopppedPacketsOut") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "ifId ") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_6 -> do GHC.Base.return i_6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   _ -> GHC.Base.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "packetsOut") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateIfDataItem
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateIfDataItem a1
                                                                       a2
                                                                       a3
                                                                       a4
                                                                       a5
                                                                       a6
                                                                       a7
                                                                       a8) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "trafficIn") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                             (,) (Data.Text.pack "networkErrors") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a2,
                                                                                                                                                                             (,) (Data.Text.pack "trafficOut") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                                                             (,) (Data.Text.pack "droppedPacketsIn") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                             (,) (Data.Text.pack "packetsIn") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a5,
                                                                                                                                                                             (,) (Data.Text.pack "dopppedPacketsOut") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a6,
                                                                                                                                                                             (,) (Data.Text.pack "ifId ") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a7,
                                                                                                                                                                             (,) (Data.Text.pack "packetsOut") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a8])

data MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap = MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap
  { monitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwapValue :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwapUnits :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                  Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                     Data.Either.Right i_7 -> do GHC.Base.return i_7
                                                                                                                                                                                                                                                     _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                  _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                                   [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                                   es -> GHC.Base.fail GHC.Base.$ Data.List.unlines es);
                                                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap a1
                                                                                    a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                          (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace = MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace
  { monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpaceValue :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpaceUnits :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                  Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                     Data.Either.Right i_8 -> do GHC.Base.return i_8
                                                                                                                                                                                                                                                     _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                  _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                                   [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                                   es_1 -> GHC.Base.fail GHC.Base.$ Data.List.unlines es_1);
                                                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace a1
                                                                                    a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                          (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace = MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace
  { monitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpaceValue :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpaceUnits :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                   Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                      Data.Either.Right i_9 -> do GHC.Base.return i_9
                                                                                                                                                                                                                                                      _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                   _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                                    [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                                    es_2 -> GHC.Base.fail GHC.Base.$ Data.List.unlines es_2);
                                                                                                                                                                                                                                                                                                                                                                                GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace a1
                                                                                     a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                           (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap = MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap
  { monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwapValue :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwapUnits :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                 Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                    Data.Either.Right i_10 -> do GHC.Base.return i_10
                                                                                                                                                                                                                                                    _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                 _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                                  [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                                  es_3 -> GHC.Base.fail GHC.Base.$ Data.List.unlines es_3);
                                                                                                                                                                                                                                                                                                                                                                              GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap a1
                                                                                   a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                         (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data MonitorResponseMonitor_msg_typeHost_updateLocalMountData = MonitorResponseMonitor_msg_typeHost_updateLocalMountData
  { monitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap  :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSwap
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace  :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSpace
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateLocalMountDataTotalSpace
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeInodes :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap   :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateLocalMountDataFreeSwap
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateLocalMountData

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountData
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateLocalMountData Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "totalSwap") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "freeSpace") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "totalSpace") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_11 -> do GHC.Base.return i_11
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "freeInodes") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "freeSwap") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateLocalMountData
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateLocalMountData a1
                                                                           a2
                                                                           a3
                                                                           a4
                                                                           a5) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "totalSwap") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a1,
                                                                                                                                                                                 (,) (Data.Text.pack "freeSpace") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a2,
                                                                                                                                                                                 (,) (Data.Text.pack "totalSpace") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a3,
                                                                                                                                                                                 (,) (Data.Text.pack "freeInodes") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                                 (,) (Data.Text.pack "freeSwap") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a5])

data MonitorResponseMonitor_msg_typeHost_updateFreeMem = MonitorResponseMonitor_msg_typeHost_updateFreeMem
  { monitorResponseMonitor_msg_typeHost_updateFreeMemValue :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateFreeMemUnits :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateFreeMem

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateFreeMem
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateFreeMem Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                  Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                     Data.Either.Right i_12 -> do GHC.Base.return i_12
                                                                                                                                                                                                                                     _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                  _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                   [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                   es_4 -> GHC.Base.fail GHC.Base.$ Data.List.unlines es_4);
                                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateFreeMem
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateFreeMem a1
                                                                    a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                          (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data MonitorResponseMonitor_msg_typeHost_updateTotalMem = MonitorResponseMonitor_msg_typeHost_updateTotalMem
  { monitorResponseMonitor_msg_typeHost_updateTotalMemValue :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateTotalMemUnits :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateTotalMem

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateTotalMem
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateTotalMem Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                   Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                      Data.Either.Right i_13 -> do GHC.Base.return i_13
                                                                                                                                                                                                                                      _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                   _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                    [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                    es_5 -> GHC.Base.fail GHC.Base.$ Data.List.unlines es_5);
                                                                                                                                                                                                                                                                                                                                                                GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateTotalMem
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateTotalMem a1
                                                                     a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                           (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem = MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem
  { monitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItemIps          :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItemLoad1MinAvg  :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItemLoad15MinAvg :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItemCoreId       :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItemLoad5MinAvg  :: Data.Maybe.Maybe Prelude.Integer
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                 Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                    Data.Either.Right i_14 -> do GHC.Base.return i_14
                                                                                                                                                                                                                                                    _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                 _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "ips") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                               Data.Either.Right i_15 -> do GHC.Base.return i_15
                                                                                                                                                                                                                                                                                                                                                                                                               _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                                                            _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "load1MinAvg") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_16 -> do GHC.Base.return i_16
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "load15MinAvg") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_17 -> do GHC.Base.return i_17
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "coreId") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_18 -> do GHC.Base.return i_18
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "load5MinAvg") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem a1
                                                                                a2
                                                                                a3
                                                                                a4
                                                                                a5) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "ips") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                      (,) (Data.Text.pack "load1MinAvg") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a2,
                                                                                                                                                                                      (,) (Data.Text.pack "load15MinAvg") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                                                                      (,) (Data.Text.pack "coreId") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                                      (,) (Data.Text.pack "load5MinAvg") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a5])

data MonitorResponseMonitor_msg_typeHost_updateCpuData = MonitorResponseMonitor_msg_typeHost_updateCpuData
  { monitorResponseMonitor_msg_typeHost_updateCpuDataUserTime      :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataStealTime     :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataSystemTime    :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataCsps          :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataSoftirqTime   :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataIdleTime      :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataNiceTime      :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataInterruptTime :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataIowaitTime    :: Data.Maybe.Maybe Prelude.Integer
  , monitorResponseMonitor_msg_typeHost_updateCpuDataCoreData      :: Data.Maybe.Maybe ([MonitorResponseMonitor_msg_typeHost_updateCpuDataCoreDataItem]) -- ^ CPU Core Data
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_updateCpuData

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_updateCpuData
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((((((Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_updateCpuData Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                          Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                             Data.Either.Right i_19 -> do GHC.Base.return i_19
                                                                                                                                                                                                                                             _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                          _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "userTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                             Data.Either.Right i_20 -> do GHC.Base.return i_20
                                                                                                                                                                                                                                                                                                                                                                                                             _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                                                          _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "stealTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_21 -> do GHC.Base.return i_21
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "systemTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_22 -> do GHC.Base.return i_22
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "csps") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_23 -> do GHC.Base.return i_23
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "softirqTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_24 -> do GHC.Base.return i_24
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "idleTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_25 -> do GHC.Base.return i_25
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "niceTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_26 -> do GHC.Base.return i_26
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "interruptTime") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_27 -> do GHC.Base.return i_27
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "iowaitTime ") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Array arr -> do {Control.Monad.unless (Data.Vector.length arr GHC.Classes.>= 1) (GHC.Base.fail "array must have at least 1 items");
ontrol.Monad.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)}
ase.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "coreData") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_updateCpuData
    where toJSON (MonitorResponseMonitor_msg_typeHost_updateCpuData a1
                                                                    a2
                                                                    a3
                                                                    a4
                                                                    a5
                                                                    a6
                                                                    a7
                                                                    a8
                                                                    a9
                                                                    a10) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "userTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                           (,) (Data.Text.pack "stealTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a2,
                                                                                                                                                                           (,) (Data.Text.pack "systemTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                                                           (,) (Data.Text.pack "csps") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                           (,) (Data.Text.pack "softirqTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a5,
                                                                                                                                                                           (,) (Data.Text.pack "idleTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a6,
                                                                                                                                                                           (,) (Data.Text.pack "niceTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a7,
                                                                                                                                                                           (,) (Data.Text.pack "interruptTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a8,
                                                                                                                                                                           (,) (Data.Text.pack "iowaitTime ") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a9,
                                                                                                                                                                           (,) (Data.Text.pack "coreData") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON)) a10])

data MonitorResponseMonitor_msg_typeHost_update = MonitorResponseMonitor_msg_typeHost_update
  { monitorResponseMonitor_msg_typeHost_updateRunningProcessCount :: Data.Maybe.Maybe Prelude.Integer -- ^ Total Number of Running Processes
  , monitorResponseMonitor_msg_typeHost_updateIfData              :: Data.Maybe.Maybe ([MonitorResponseMonitor_msg_typeHost_updateIfDataItem]) -- ^ Network Interface Data
  , monitorResponseMonitor_msg_typeHost_updateUname               :: Data.Maybe.Maybe Data.Text.Text -- ^ OS System Information
  , monitorResponseMonitor_msg_typeHost_updateUpTime              :: Data.Maybe.Maybe Prelude.Integer -- ^ Time Since Host Was Started in Secs
  , monitorResponseMonitor_msg_typeHost_updateLocalMountData      :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateLocalMountData -- ^ Local Mount Data
  , monitorResponseMonitor_msg_typeHost_updateFreeMem             :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateFreeMem -- ^ Amount of Free Memory
  , monitorResponseMonitor_msg_typeHost_updateLoggedInUsers       :: Data.Maybe.Maybe ([Data.Aeson.Types.Value]) -- ^ List of logged in users
  , monitorResponseMonitor_msg_typeHost_updateTotalMem            :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateTotalMem -- ^ Total Memory Available
  , monitorResponseMonitor_msg_typeHost_updateProcessCount        :: Data.Maybe.Maybe Prelude.Integer -- ^ Total Number of Processes
  , monitorResponseMonitor_msg_typeHost_updateBootTime            :: Data.Maybe.Maybe Data.Text.Text -- ^ Time Since Host Was Started
  , monitorResponseMonitor_msg_typeHost_updateCpuData             :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_updateCpuData -- ^ CPU Data
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeHost_update

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeHost_update
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((((((((Control.Applicative.pure MonitorResponseMonitor_msg_typeHost_update Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                    Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                       Data.Either.Right i_28 -> do GHC.Base.return i_28
                                                                                                                                                                                                                                       _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                    _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "runningProcessCount") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Array arr -> do {Control.Monad.unless (Data.Vector.length arr GHC.Classes.>= 1) (GHC.Base.fail "array must have at least 1 items");
                                                                                                                                                                                                                                                                                                                                                                                                                 Control.Monad.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)}
                                                                                                                                                                                                                                                                                                                                                                               _ -> GHC.Base.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "ifData") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "uname") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_29 -> do GHC.Base.return i_29
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "upTime") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "localMountData") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "freeMem") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Array arr -> do Control.Monad.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)
ase.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "loggedInUsers") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "totalMem") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_30 -> do GHC.Base.return i_30
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "processCount") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "bootTime") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "cpuData") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeHost_update
    where toJSON (MonitorResponseMonitor_msg_typeHost_update a1
                                                             a2
                                                             a3
                                                             a4
                                                             a5
                                                             a6
                                                             a7
                                                             a8
                                                             a9
                                                             a10
                                                             a11) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "runningProcessCount") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                    (,) (Data.Text.pack "ifData") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON)) a2,
                                                                                                                                                                    (,) (Data.Text.pack "uname") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a3,
                                                                                                                                                                    (,) (Data.Text.pack "upTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                    (,) (Data.Text.pack "localMountData") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a5,
                                                                                                                                                                    (,) (Data.Text.pack "freeMem") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a6,
                                                                                                                                                                    (,) (Data.Text.pack "loggedInUsers") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON)) a7,
                                                                                                                                                                    (,) (Data.Text.pack "totalMem") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a8,
                                                                                                                                                                    (,) (Data.Text.pack "processCount") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a9,
                                                                                                                                                                    (,) (Data.Text.pack "bootTime") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a10,
                                                                                                                                                                    (,) (Data.Text.pack "cpuData") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a11])

data MonitorResponseMonitor_msg_typeDisk_status_drivemanager = MonitorResponseMonitor_msg_typeDisk_status_drivemanager
  { monitorResponseMonitor_msg_typeDisk_status_drivemanagerEnclosureSN :: Data.Text.Text -- ^ Enclosure Serial Number
  , monitorResponseMonitor_msg_typeDisk_status_drivemanagerDiskNum     :: Data.Scientific.Scientific -- ^ Drive Number within the enclosure
  , monitorResponseMonitor_msg_typeDisk_status_drivemanagerDiskStatus  :: Data.Text.Text -- ^ Disk Status
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_typeDisk_status_drivemanager

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_typeDisk_status_drivemanager
    where parseJSON (Data.Aeson.Types.Object obj) = do ((Control.Applicative.pure MonitorResponseMonitor_msg_typeDisk_status_drivemanager Control.Applicative.<*> Data.Maybe.maybe (GHC.Base.fail "required property enclosureSN missing") (\val -> case val of
                                                                                                                                                                                                                                                        Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                        _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "enclosureSN") obj)) Control.Applicative.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskNum missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Types.Number num -> do GHC.Base.return num
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _ -> GHC.Base.fail "not a number") (Data.HashMap.Lazy.lookup (Data.Text.pack "diskNum") obj)) Control.Applicative.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskStatus missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "diskStatus") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_typeDisk_status_drivemanager
    where toJSON (MonitorResponseMonitor_msg_typeDisk_status_drivemanager a1
                                                                          a2
                                                                          a3) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "enclosureSN") Data.Functor.<$> (Data.Maybe.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                                (,) (Data.Text.pack "diskNum") Data.Functor.<$> (Data.Maybe.Just GHC.Base.. Data.Aeson.Types.Number) a2,
                                                                                                                                                                                (,) (Data.Text.pack "diskStatus") Data.Functor.<$> (Data.Maybe.Just GHC.Base.. Data.Aeson.Types.String) a3])

data MonitorResponseMonitor_msg_type = MonitorResponseMonitor_msg_type
  { monitorResponseMonitor_msg_typeHost_update              :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeHost_update
  , monitorResponseMonitor_msg_typeDisk_status_drivemanager :: Data.Maybe.Maybe MonitorResponseMonitor_msg_typeDisk_status_drivemanager
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponseMonitor_msg_type

instance Data.Aeson.FromJSON MonitorResponseMonitor_msg_type
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponseMonitor_msg_type Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "host_update") obj)) Control.Applicative.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "disk_status_drivemanager") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponseMonitor_msg_type
    where toJSON (MonitorResponseMonitor_msg_type a1
                                                  a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "host_update") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a1,
                                                                                                                                                        (,) (Data.Text.pack "disk_status_drivemanager") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a2])

data MonitorResponse = MonitorResponse
  { monitorResponseMonitor_msg_type   :: MonitorResponseMonitor_msg_type
  , monitorResponseSspl_ll_msg_header :: Data.Maybe.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, Generic, Typeable)

instance Binary MonitorResponse

instance Data.Aeson.FromJSON MonitorResponse
    where parseJSON (Data.Aeson.Types.Object obj) = do (Control.Applicative.pure MonitorResponse Control.Applicative.<*> Data.Maybe.maybe (GHC.Base.fail "required property monitor_msg_type missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "monitor_msg_type") obj)) Control.Applicative.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                                   [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                   es_6 -> GHC.Base.fail GHC.Base.$ Data.List.unlines es_6);
                                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "sspl_ll_msg_header") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON MonitorResponse
    where toJSON (MonitorResponse a1
                                  a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "monitor_msg_type") Data.Functor.<$> (Data.Maybe.Just GHC.Base.. Data.Aeson.toJSON) a1,
                                                                                                                                        (,) (Data.Text.pack "sspl_ll_msg_header") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])
