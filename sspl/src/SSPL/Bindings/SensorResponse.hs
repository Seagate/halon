{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE StandaloneDeriving #-}

module SSPL.Bindings.SensorResponse where

import Control.Monad
import Data.Aeson
import Data.Aeson.Schema.Choice
import Data.Aeson.Schema.Types
import Data.Aeson.Schema.Validator
import Data.Aeson.Types
import Data.Aeson.Types
import Data.Binary
import Data.Either
import Data.Functor
import Data.HashMap.Lazy
import Data.Hashable
import Data.Map
import Data.Maybe
import Data.Ratio
import Data.Scientific
import Data.Text
import Data.Traversable
import Data.Typeable
import Data.Vector
import GHC.Base
import GHC.Classes
import GHC.Generics
import GHC.Num
import GHC.Show
import Prelude
import SSPL.Bindings.Instances ()
import Text.Regex
import Text.Regex.PCRE.String

graph :: Data.Aeson.Schema.Types.Graph Data.Aeson.Schema.Types.Schema
                                       Data.Text.Text

graph = Data.Map.fromList [(Data.Text.pack "SensorResponse",
                            Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                          Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "signature",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Authentication signature of message")}),
                                                                                                                                 (Data.Text.pack "time",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "The time the signature was generated")}),
                                                                                                                                 (Data.Text.pack "expires",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "The number of secs the signature remains valid after being generated")}),
                                                                                                                                 (Data.Text.pack "username",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Username who generated message")}),
                                                                                                                                 (Data.Text.pack "message",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "sspl_ll_msg_header",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty),
                                                                                                                                                                                                                                       (Data.Text.pack "sensor_response_type",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "snmp_trap",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "trap_data",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "JSON data about the SNMP Trap")})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "SNMP Trap Information")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "disk_status_hpi",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "productName",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Product name of the drive")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "enclosureSN",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Enclosure Serial Number")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "drawer",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Drawer number of drive")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "manufacturer",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Manufacturer of the drive")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "hostId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Host ID of node")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "diskInstalled",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.BooleanType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk Installed in Slot")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "location",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Location number of drive")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "diskNum",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Drive Number within the enclosure")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "deviceId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Drive Identifier")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "serialNumber",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Serial Number of the drive")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "diskPowered",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.BooleanType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk Powered")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "wwn",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "wwn of the drive")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "productVersion",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Version of the drive")})]}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "if_data",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "hostId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Hostname of system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "localtime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Local time on system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "interfaces",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaItems = GHC.Base.Just (Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
ata.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "trafficIn",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "networkErrors",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "trafficOut",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "droppedPacketsIn",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "packetsIn",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "ifId",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType]}),
ata.Text.pack "droppedPacketsOut",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "packetsOut",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]})]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaMinItems = 1})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Network Interface Data")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "host_update",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "runningProcessCount",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Total number of running processes")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "uname",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "OS system information")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "hostId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Hostname of system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "localtime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Local time on system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "upTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.NumberType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Time since host was started in secs")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeMem",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Amount of free memory")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "loggedInUsers",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "List of logged in users")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "totalMem",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Total memory available")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "processCount",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Total number of processes")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "bootTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Time host was started")})]}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "disk_status_drivemanager",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "enclosureSN",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Enclosure Serial Number")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "diskNum",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk Number within the enclosure")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "diskStatus",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk Status")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "pathID",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk by-id Symlink")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "serialNumber",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk Serial Number")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "diskReason",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Disk Reason")})]}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "service_watchdog",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "service_state",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Current state of the service")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "previous_pid",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Previous PID of the service")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "service_substate",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Current substate of the service")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "previous_service_substate",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Previous substate of the service")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "pid",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Current PID of the service")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "service_name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Identify the service with a state change")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "previous_service_state",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Previous state of the service")})]}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "local_mount_data",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "totalSwap",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "hostId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Hostname of system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "localtime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Local time on system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeSpace",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Schema.Types.empty)]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "totalSpace",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (Data.Text.pack "units",
ata.Aeson.Schema.Types.empty)]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeInodes",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "freeSwap",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "value",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "units",
ata.Aeson.Schema.Types.empty)]})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Local mount data")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "expander_reset",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Expander Reset Occurred")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "cpu_data",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "userTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "stealTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "hostId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Hostname of system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "localtime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Local time on system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "systemTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "csps",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "softirqTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "idleTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "niceTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "interruptTime",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "iowaitTime ",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "coreData",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaItems = GHC.Base.Just (Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
ata.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "ips",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "load1MinAvg",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "load15MinAvg",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
ata.Text.pack "coreId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (Data.Text.pack "load5MinAvg",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType]})]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaMinItems = 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "CPU Core Data")})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "CPU Data")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "raid_data",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "hostId",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Hostname of system")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "device",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "md device")}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Data.Text.pack "drives",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ArrayType],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaItems = GHC.Base.Just (Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
ata.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "status",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
ata.Aeson.Schema.Types.schemaRequired = Prelude.True,
ata.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Drive status (U, _)")}),
ata.Text.pack "identity",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
ata.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "path",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
ata.Aeson.Schema.Types.schemaRequired = Prelude.True,
ata.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Drive path (e.g. /dev/disk)")}),
ata.Text.pack "serialNumber",
ata.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
ata.Aeson.Schema.Types.schemaRequired = Prelude.True,
ata.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Drive serial number")})]})]}),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaMinItems = 2,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Constituent drives")})],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "RAID Data")})],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaRequired = Prelude.True})],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True})],
                                                          Data.Aeson.Schema.Types.schemaId = GHC.Base.Just (Data.Text.pack "http://json-schema.org/draft-03/schema#"),
                                                          Data.Aeson.Schema.Types.schemaDSchema = GHC.Base.Just (Data.Text.pack "http://json-schema.org/draft-03/schema#")})]

data SensorResponseMessageSensor_response_typeSnmp_trap = SensorResponseMessageSensor_response_typeSnmp_trap
  { sensorResponseMessageSensor_response_typeSnmp_trapTrap_data :: Data.Text.Text -- ^ JSON data about the SNMP Trap
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeSnmp_trap

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeSnmp_trap

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeSnmp_trap
    where parseJSON (Data.Aeson.Types.Object obj) = do GHC.Base.pure SensorResponseMessageSensor_response_typeSnmp_trap GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property trap_data missing") (\val -> case val of
                                                                                                                                                                                                                         Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                         _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "trap_data") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeSnmp_trap
    where toJSON (SensorResponseMessageSensor_response_typeSnmp_trap a1) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "trap_data") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1])

data SensorResponseMessageSensor_response_typeDisk_status_hpi = SensorResponseMessageSensor_response_typeDisk_status_hpi
  { sensorResponseMessageSensor_response_typeDisk_status_hpiProductName :: Data.Text.Text -- ^ Product name of the drive
  , sensorResponseMessageSensor_response_typeDisk_status_hpiEnclosureSN :: Data.Text.Text -- ^ Enclosure Serial Number
  , sensorResponseMessageSensor_response_typeDisk_status_hpiDrawer :: Prelude.Integer -- ^ Drawer number of drive
  , sensorResponseMessageSensor_response_typeDisk_status_hpiManufacturer :: Data.Text.Text -- ^ Manufacturer of the drive
  , sensorResponseMessageSensor_response_typeDisk_status_hpiHostId :: Data.Text.Text -- ^ Host ID of node
  , sensorResponseMessageSensor_response_typeDisk_status_hpiDiskInstalled :: Prelude.Bool -- ^ Disk Installed in Slot
  , sensorResponseMessageSensor_response_typeDisk_status_hpiLocation :: Prelude.Integer -- ^ Location number of drive
  , sensorResponseMessageSensor_response_typeDisk_status_hpiDiskNum :: Prelude.Integer -- ^ Drive Number within the enclosure
  , sensorResponseMessageSensor_response_typeDisk_status_hpiDeviceId :: Data.Text.Text -- ^ Drive Identifier
  , sensorResponseMessageSensor_response_typeDisk_status_hpiSerialNumber :: Data.Text.Text -- ^ Serial Number of the drive
  , sensorResponseMessageSensor_response_typeDisk_status_hpiDiskPowered :: Prelude.Bool -- ^ Disk Powered
  , sensorResponseMessageSensor_response_typeDisk_status_hpiWwn :: Data.Text.Text -- ^ wwn of the drive
  , sensorResponseMessageSensor_response_typeDisk_status_hpiProductVersion :: Data.Text.Text -- ^ Version of the drive
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeDisk_status_hpi

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeDisk_status_hpi

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeDisk_status_hpi
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((((((((((GHC.Base.pure SensorResponseMessageSensor_response_typeDisk_status_hpi GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property productName missing") (\val -> case val of
                                                                                                                                                                                                                                             Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                             _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "productName") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property enclosureSN missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                                                  _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "enclosureSN") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property drawer missing") (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Data.Either.Right i -> do GHC.Base.return i
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "drawer") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property manufacturer missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "manufacturer") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property hostId missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "hostId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskInstalled missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "diskInstalled") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property location missing") (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_1 -> do GHC.Base.return i_1
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "location") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskNum missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_2 -> do GHC.Base.return i_2
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "diskNum") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property deviceId missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "deviceId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property serialNumber missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "serialNumber") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskPowered missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "diskPowered") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property wwn missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "wwn") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property productVersion missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "productVersion") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeDisk_status_hpi
    where toJSON (SensorResponseMessageSensor_response_typeDisk_status_hpi a1
                                                                           a2
                                                                           a3
                                                                           a4
                                                                           a5
                                                                           a6
                                                                           a7
                                                                           a8
                                                                           a9
                                                                           a10
                                                                           a11
                                                                           a12
                                                                           a13) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "productName") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                                  (,) (Data.Text.pack "enclosureSN") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                                                  (,) (Data.Text.pack "drawer") Data.Functor.<$> (GHC.Base.Just GHC.Base.. (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger)) a3,
                                                                                                                                                                                  (,) (Data.Text.pack "manufacturer") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                                                                  (,) (Data.Text.pack "hostId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a5,
                                                                                                                                                                                  (,) (Data.Text.pack "diskInstalled") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.Bool) a6,
                                                                                                                                                                                  (,) (Data.Text.pack "location") Data.Functor.<$> (GHC.Base.Just GHC.Base.. (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger)) a7,
                                                                                                                                                                                  (,) (Data.Text.pack "diskNum") Data.Functor.<$> (GHC.Base.Just GHC.Base.. (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger)) a8,
                                                                                                                                                                                  (,) (Data.Text.pack "deviceId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a9,
                                                                                                                                                                                  (,) (Data.Text.pack "serialNumber") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a10,
                                                                                                                                                                                  (,) (Data.Text.pack "diskPowered") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.Bool) a11,
                                                                                                                                                                                  (,) (Data.Text.pack "wwn") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a12,
                                                                                                                                                                                  (,) (Data.Text.pack "productVersion") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a13])

data SensorResponseMessageSensor_response_typeIf_dataInterfacesItem = SensorResponseMessageSensor_response_typeIf_dataInterfacesItem
  { sensorResponseMessageSensor_response_typeIf_dataInterfacesItemTrafficIn :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemNetworkErrors :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemTrafficOut :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemDroppedPacketsIn :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemPacketsIn :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemIfId :: GHC.Base.Maybe Data.Text.Text
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemDroppedPacketsOut :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeIf_dataInterfacesItemPacketsOut :: GHC.Base.Maybe Prelude.Integer
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeIf_dataInterfacesItem

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeIf_dataInterfacesItem

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeIf_dataInterfacesItem
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((((GHC.Base.pure SensorResponseMessageSensor_response_typeIf_dataInterfacesItem GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                               Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                  Data.Either.Right i_3 -> do GHC.Base.return i_3
                                                                                                                                                                                                                                  _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                               _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "trafficIn") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                        Data.Either.Right i_4 -> do GHC.Base.return i_4
                                                                                                                                                                                                                                                                                                                                                                                        _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                                     _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "networkErrors") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Either.Right i_5 -> do GHC.Base.return i_5
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  _ -> GHC.Base.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "trafficOut") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_6 -> do GHC.Base.return i_6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         _ -> GHC.Base.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "droppedPacketsIn") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_7 -> do GHC.Base.return i_7
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "packetsIn") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "ifId") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_8 -> do GHC.Base.return i_8
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "droppedPacketsOut") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_9 -> do GHC.Base.return i_9
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         _ -> GHC.Base.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "packetsOut") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeIf_dataInterfacesItem
    where toJSON (SensorResponseMessageSensor_response_typeIf_dataInterfacesItem a1
                                                                                 a2
                                                                                 a3
                                                                                 a4
                                                                                 a5
                                                                                 a6
                                                                                 a7
                                                                                 a8) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "trafficIn") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                       (,) (Data.Text.pack "networkErrors") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a2,
                                                                                                                                                                                       (,) (Data.Text.pack "trafficOut") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                                                                       (,) (Data.Text.pack "droppedPacketsIn") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                                       (,) (Data.Text.pack "packetsIn") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a5,
                                                                                                                                                                                       (,) (Data.Text.pack "ifId") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a6,
                                                                                                                                                                                       (,) (Data.Text.pack "droppedPacketsOut") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a7,
                                                                                                                                                                                       (,) (Data.Text.pack "packetsOut") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a8])

data SensorResponseMessageSensor_response_typeIf_data = SensorResponseMessageSensor_response_typeIf_data
  { sensorResponseMessageSensor_response_typeIf_dataHostId :: Data.Text.Text -- ^ Hostname of system
  , sensorResponseMessageSensor_response_typeIf_dataLocaltime :: Data.Text.Text -- ^ Local time on system
  , sensorResponseMessageSensor_response_typeIf_dataInterfaces :: GHC.Base.Maybe ([SensorResponseMessageSensor_response_typeIf_dataInterfacesItem])
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeIf_data

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeIf_data

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeIf_data
    where parseJSON (Data.Aeson.Types.Object obj) = do ((GHC.Base.pure SensorResponseMessageSensor_response_typeIf_data GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property hostId missing") (\val -> case val of
                                                                                                                                                                                                                      Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                      _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "hostId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property localtime missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                    _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "localtime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Array arr -> do {Control.Monad.unless (Data.Vector.length arr GHC.Classes.>= 1) (GHC.Base.fail "array must have at least 1 items");
ata.Traversable.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)}
ase.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "interfaces") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeIf_data
    where toJSON (SensorResponseMessageSensor_response_typeIf_data a1
                                                                   a2
                                                                   a3) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "hostId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                         (,) (Data.Text.pack "localtime") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                                         (,) (Data.Text.pack "interfaces") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON)) a3])

data SensorResponseMessageSensor_response_typeHost_updateFreeMem = SensorResponseMessageSensor_response_typeHost_updateFreeMem
  { sensorResponseMessageSensor_response_typeHost_updateFreeMemValue :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeHost_updateFreeMemUnits :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeHost_updateFreeMem

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeHost_updateFreeMem

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeHost_updateFreeMem
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeHost_updateFreeMem GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                      Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                         Data.Either.Right i_10 -> do GHC.Base.return i_10
                                                                                                                                                                                                                         _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                      _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                             [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                             es -> GHC.Base.fail GHC.Base.$ Prelude.unlines es);
                                                                                                                                                                                                                                                                                                                                        GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeHost_updateFreeMem
    where toJSON (SensorResponseMessageSensor_response_typeHost_updateFreeMem a1
                                                                              a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                    (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data SensorResponseMessageSensor_response_typeHost_updateTotalMem = SensorResponseMessageSensor_response_typeHost_updateTotalMem
  { sensorResponseMessageSensor_response_typeHost_updateTotalMemValue :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeHost_updateTotalMemUnits :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeHost_updateTotalMem

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeHost_updateTotalMem

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeHost_updateTotalMem
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeHost_updateTotalMem GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                       Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                          Data.Either.Right i_11 -> do GHC.Base.return i_11
                                                                                                                                                                                                                          _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                       _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                              [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                              es_1 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_1);
                                                                                                                                                                                                                                                                                                                                         GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeHost_updateTotalMem
    where toJSON (SensorResponseMessageSensor_response_typeHost_updateTotalMem a1
                                                                               a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                     (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data SensorResponseMessageSensor_response_typeHost_update = SensorResponseMessageSensor_response_typeHost_update
  { sensorResponseMessageSensor_response_typeHost_updateRunningProcessCount :: GHC.Base.Maybe Prelude.Integer -- ^ Total number of running processes
  , sensorResponseMessageSensor_response_typeHost_updateUname :: GHC.Base.Maybe Data.Text.Text -- ^ OS system information
  , sensorResponseMessageSensor_response_typeHost_updateHostId :: Data.Text.Text -- ^ Hostname of system
  , sensorResponseMessageSensor_response_typeHost_updateLocaltime :: Data.Text.Text -- ^ Local time on system
  , sensorResponseMessageSensor_response_typeHost_updateUpTime :: GHC.Base.Maybe Data.Scientific.Scientific -- ^ Time since host was started in secs
  , sensorResponseMessageSensor_response_typeHost_updateFreeMem :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeHost_updateFreeMem -- ^ Amount of free memory
  , sensorResponseMessageSensor_response_typeHost_updateLoggedInUsers :: GHC.Base.Maybe ([Data.Aeson.Types.Value]) -- ^ List of logged in users
  , sensorResponseMessageSensor_response_typeHost_updateTotalMem :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeHost_updateTotalMem -- ^ Total memory available
  , sensorResponseMessageSensor_response_typeHost_updateProcessCount :: GHC.Base.Maybe Prelude.Integer -- ^ Total number of processes
  , sensorResponseMessageSensor_response_typeHost_updateBootTime :: GHC.Base.Maybe Data.Text.Text -- ^ Time host was started
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeHost_update

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeHost_update

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeHost_update
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((((((GHC.Base.pure SensorResponseMessageSensor_response_typeHost_update GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                       Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                          Data.Either.Right i_12 -> do GHC.Base.return i_12
                                                                                                                                                                                                                          _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                       _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "runningProcessCount") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                       Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                       _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "uname") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property hostId missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "hostId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property localtime missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "localtime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> do GHC.Base.return num
ase.fail "not a number") (Data.HashMap.Lazy.lookup (Data.Text.pack "upTime") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "freeMem") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Array arr -> do Data.Traversable.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)
ase.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "loggedInUsers") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "totalMem") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_13 -> do GHC.Base.return i_13
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "processCount") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "bootTime") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeHost_update
    where toJSON (SensorResponseMessageSensor_response_typeHost_update a1
                                                                       a2
                                                                       a3
                                                                       a4
                                                                       a5
                                                                       a6
                                                                       a7
                                                                       a8
                                                                       a9
                                                                       a10) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "runningProcessCount") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                              (,) (Data.Text.pack "uname") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a2,
                                                                                                                                                                              (,) (Data.Text.pack "hostId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a3,
                                                                                                                                                                              (,) (Data.Text.pack "localtime") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                                                              (,) (Data.Text.pack "upTime") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.Number a5,
                                                                                                                                                                              (,) (Data.Text.pack "freeMem") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a6,
                                                                                                                                                                              (,) (Data.Text.pack "loggedInUsers") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON)) a7,
                                                                                                                                                                              (,) (Data.Text.pack "totalMem") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a8,
                                                                                                                                                                              (,) (Data.Text.pack "processCount") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a9,
                                                                                                                                                                              (,) (Data.Text.pack "bootTime") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a10])

data SensorResponseMessageSensor_response_typeDisk_status_drivemanager = SensorResponseMessageSensor_response_typeDisk_status_drivemanager
  { sensorResponseMessageSensor_response_typeDisk_status_drivemanagerEnclosureSN :: Data.Text.Text -- ^ Enclosure Serial Number
  , sensorResponseMessageSensor_response_typeDisk_status_drivemanagerDiskNum :: Prelude.Integer -- ^ Disk Number within the enclosure
  , sensorResponseMessageSensor_response_typeDisk_status_drivemanagerDiskStatus :: Data.Text.Text -- ^ Disk Status
  , sensorResponseMessageSensor_response_typeDisk_status_drivemanagerPathID :: Data.Text.Text -- ^ Disk by-id Symlink
  , sensorResponseMessageSensor_response_typeDisk_status_drivemanagerSerialNumber :: Data.Text.Text -- ^ Disk Serial Number
  , sensorResponseMessageSensor_response_typeDisk_status_drivemanagerDiskReason :: Data.Text.Text -- ^ Disk Reason
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeDisk_status_drivemanager

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeDisk_status_drivemanager

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeDisk_status_drivemanager
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((GHC.Base.pure SensorResponseMessageSensor_response_typeDisk_status_drivemanager GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property enclosureSN missing") (\val -> case val of
                                                                                                                                                                                                                                               Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                               _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "enclosureSN") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskNum missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Data.Either.Right i_14 -> do GHC.Base.return i_14
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                                                                                                                                _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "diskNum") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskStatus missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "diskStatus") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property pathID missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "pathID") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property serialNumber missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "serialNumber") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property diskReason missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "diskReason") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeDisk_status_drivemanager
    where toJSON (SensorResponseMessageSensor_response_typeDisk_status_drivemanager a1
                                                                                    a2
                                                                                    a3
                                                                                    a4
                                                                                    a5
                                                                                    a6) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "enclosureSN") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                                          (,) (Data.Text.pack "diskNum") Data.Functor.<$> (GHC.Base.Just GHC.Base.. (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger)) a2,
                                                                                                                                                                                          (,) (Data.Text.pack "diskStatus") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a3,
                                                                                                                                                                                          (,) (Data.Text.pack "pathID") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                                                                          (,) (Data.Text.pack "serialNumber") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a5,
                                                                                                                                                                                          (,) (Data.Text.pack "diskReason") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a6])

data SensorResponseMessageSensor_response_typeService_watchdog = SensorResponseMessageSensor_response_typeService_watchdog
  { sensorResponseMessageSensor_response_typeService_watchdogService_state :: Data.Text.Text -- ^ Current state of the service
  , sensorResponseMessageSensor_response_typeService_watchdogPrevious_pid :: Data.Text.Text -- ^ Previous PID of the service
  , sensorResponseMessageSensor_response_typeService_watchdogService_substate :: Data.Text.Text -- ^ Current substate of the service
  , sensorResponseMessageSensor_response_typeService_watchdogPrevious_service_substate :: Data.Text.Text -- ^ Previous substate of the service
  , sensorResponseMessageSensor_response_typeService_watchdogPid :: Data.Text.Text -- ^ Current PID of the service
  , sensorResponseMessageSensor_response_typeService_watchdogService_name :: Data.Text.Text -- ^ Identify the service with a state change
  , sensorResponseMessageSensor_response_typeService_watchdogPrevious_service_state :: Data.Text.Text -- ^ Previous state of the service
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeService_watchdog

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeService_watchdog

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeService_watchdog
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((((GHC.Base.pure SensorResponseMessageSensor_response_typeService_watchdog GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property service_state missing") (\val -> case val of
                                                                                                                                                                                                                                          Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                          _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "service_state") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property previous_pid missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                                                  _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "previous_pid") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property service_substate missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Data.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "service_substate") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property previous_service_substate missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "previous_service_substate") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property pid missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "pid") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property service_name missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "service_name") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property previous_service_state missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "previous_service_state") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeService_watchdog
    where toJSON (SensorResponseMessageSensor_response_typeService_watchdog a1
                                                                            a2
                                                                            a3
                                                                            a4
                                                                            a5
                                                                            a6
                                                                            a7) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "service_state") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                                  (,) (Data.Text.pack "previous_pid") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                                                  (,) (Data.Text.pack "service_substate") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a3,
                                                                                                                                                                                  (,) (Data.Text.pack "previous_service_substate") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                                                                  (,) (Data.Text.pack "pid") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a5,
                                                                                                                                                                                  (,) (Data.Text.pack "service_name") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a6,
                                                                                                                                                                                  (,) (Data.Text.pack "previous_service_state") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a7])

data SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap = SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap
  { sensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwapValue :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwapUnits :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                             Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                Data.Either.Right i_15 -> do GHC.Base.return i_15
                                                                                                                                                                                                                                _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                             _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                    [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                    es_2 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_2);
                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap
    where toJSON (SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap a1
                                                                                     a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                           (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace = SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace
  { sensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpaceValue :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpaceUnits :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                             Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                Data.Either.Right i_16 -> do GHC.Base.return i_16
                                                                                                                                                                                                                                _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                             _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                    [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                    es_3 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_3);
                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace
    where toJSON (SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace a1
                                                                                     a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                           (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace = SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace
  { sensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpaceValue :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpaceUnits :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                              Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                 Data.Either.Right i_17 -> do GHC.Base.return i_17
                                                                                                                                                                                                                                 _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                              _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                     [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                     es_4 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_4);
                                                                                                                                                                                                                                                                                                                                                GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace
    where toJSON (SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace a1
                                                                                      a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                            (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap = SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap
  { sensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwapValue :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwapUnits :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                            Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                               Data.Either.Right i_18 -> do GHC.Base.return i_18
                                                                                                                                                                                                                               _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                            _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "value") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                                                   [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                   es_5 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_5);
                                                                                                                                                                                                                                                                                                                                              GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "units") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap
    where toJSON (SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap a1
                                                                                    a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "value") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                          (,) (Data.Text.pack "units") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data SensorResponseMessageSensor_response_typeLocal_mount_data = SensorResponseMessageSensor_response_typeLocal_mount_data
  { sensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSwap
  , sensorResponseMessageSensor_response_typeLocal_mount_dataHostId :: Data.Text.Text -- ^ Hostname of system
  , sensorResponseMessageSensor_response_typeLocal_mount_dataLocaltime :: Data.Text.Text -- ^ Local time on system
  , sensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSpace
  , sensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeLocal_mount_dataTotalSpace
  , sensorResponseMessageSensor_response_typeLocal_mount_dataFreeInodes :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeLocal_mount_dataFreeSwap
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeLocal_mount_data

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeLocal_mount_data

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeLocal_mount_data
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((((GHC.Base.pure SensorResponseMessageSensor_response_typeLocal_mount_data GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "totalSwap") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property hostId missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                            _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "hostId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property localtime missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "localtime") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "freeSpace") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "totalSpace") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_19 -> do GHC.Base.return i_19
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "freeInodes") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "freeSwap") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeLocal_mount_data
    where toJSON (SensorResponseMessageSensor_response_typeLocal_mount_data a1
                                                                            a2
                                                                            a3
                                                                            a4
                                                                            a5
                                                                            a6
                                                                            a7) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "totalSwap") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a1,
                                                                                                                                                                                  (,) (Data.Text.pack "hostId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                                                  (,) (Data.Text.pack "localtime") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a3,
                                                                                                                                                                                  (,) (Data.Text.pack "freeSpace") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a4,
                                                                                                                                                                                  (,) (Data.Text.pack "totalSpace") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a5,
                                                                                                                                                                                  (,) (Data.Text.pack "freeInodes") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a6,
                                                                                                                                                                                  (,) (Data.Text.pack "freeSwap") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a7])

data SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem = SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem
  { sensorResponseMessageSensor_response_typeCpu_dataCoreDataItemIps :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataCoreDataItemLoad1MinAvg :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataCoreDataItemLoad15MinAvg :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataCoreDataItemCoreId :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataCoreDataItemLoad5MinAvg :: GHC.Base.Maybe Prelude.Integer
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((GHC.Base.pure SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                           Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                              Data.Either.Right i_20 -> do GHC.Base.return i_20
                                                                                                                                                                                                                              _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                           _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "ips") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                              Data.Either.Right i_21 -> do GHC.Base.return i_21
                                                                                                                                                                                                                                                                                                                                                                              _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                           _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "load1MinAvg") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Data.Either.Right i_22 -> do GHC.Base.return i_22
ase.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "load15MinAvg") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_23 -> do GHC.Base.return i_23
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "coreId") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_24 -> do GHC.Base.return i_24
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "load5MinAvg") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem
    where toJSON (SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem a1
                                                                                a2
                                                                                a3
                                                                                a4
                                                                                a5) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "ips") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                                      (,) (Data.Text.pack "load1MinAvg") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a2,
                                                                                                                                                                                      (,) (Data.Text.pack "load15MinAvg") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                                                                      (,) (Data.Text.pack "coreId") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a4,
                                                                                                                                                                                      (,) (Data.Text.pack "load5MinAvg") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a5])

data SensorResponseMessageSensor_response_typeCpu_data = SensorResponseMessageSensor_response_typeCpu_data
  { sensorResponseMessageSensor_response_typeCpu_dataUserTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataStealTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataHostId :: Data.Text.Text -- ^ Hostname of system
  , sensorResponseMessageSensor_response_typeCpu_dataLocaltime :: Data.Text.Text -- ^ Local time on system
  , sensorResponseMessageSensor_response_typeCpu_dataSystemTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataCsps :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataSoftirqTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataIdleTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataNiceTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataInterruptTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataIowaitTime :: GHC.Base.Maybe Prelude.Integer
  , sensorResponseMessageSensor_response_typeCpu_dataCoreData :: GHC.Base.Maybe ([SensorResponseMessageSensor_response_typeCpu_dataCoreDataItem]) -- ^ CPU Core Data
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeCpu_data

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeCpu_data

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeCpu_data
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((((((((GHC.Base.pure SensorResponseMessageSensor_response_typeCpu_data GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                      Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                         Data.Either.Right i_25 -> do GHC.Base.return i_25
                                                                                                                                                                                                                         _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                      _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "userTime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
                                                                                                                                                                                                                                                                                                                                                                              Data.Either.Right i_26 -> do GHC.Base.return i_26
                                                                                                                                                                                                                                                                                                                                                                              _ -> GHC.Base.fail "not an integer"
                                                                                                                                                                                                                                                                                                                                           _ -> GHC.Base.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "stealTime") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property hostId missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "hostId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property localtime missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Data.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "localtime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_27 -> do GHC.Base.return i_27
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "systemTime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_28 -> do GHC.Base.return i_28
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "csps") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_29 -> do GHC.Base.return i_29
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "softirqTime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_30 -> do GHC.Base.return i_30
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "idleTime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_31 -> do GHC.Base.return i_31
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "niceTime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_32 -> do GHC.Base.return i_32
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "interruptTime") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_33 -> do GHC.Base.return i_33
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "iowaitTime ") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Data.Aeson.Types.Array arr -> do {Control.Monad.unless (Data.Vector.length arr GHC.Classes.>= 1) (GHC.Base.fail "array must have at least 1 items");
ata.Traversable.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)}
ase.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "coreData") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeCpu_data
    where toJSON (SensorResponseMessageSensor_response_typeCpu_data a1
                                                                    a2
                                                                    a3
                                                                    a4
                                                                    a5
                                                                    a6
                                                                    a7
                                                                    a8
                                                                    a9
                                                                    a10
                                                                    a11
                                                                    a12) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "userTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a1,
                                                                                                                                                                           (,) (Data.Text.pack "stealTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a2,
                                                                                                                                                                           (,) (Data.Text.pack "hostId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a3,
                                                                                                                                                                           (,) (Data.Text.pack "localtime") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                                                           (,) (Data.Text.pack "systemTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a5,
                                                                                                                                                                           (,) (Data.Text.pack "csps") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a6,
                                                                                                                                                                           (,) (Data.Text.pack "softirqTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a7,
                                                                                                                                                                           (,) (Data.Text.pack "idleTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a8,
                                                                                                                                                                           (,) (Data.Text.pack "niceTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a9,
                                                                                                                                                                           (,) (Data.Text.pack "interruptTime") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a10,
                                                                                                                                                                           (,) (Data.Text.pack "iowaitTime ") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a11,
                                                                                                                                                                           (,) (Data.Text.pack "coreData") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON)) a12])

data SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity = SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity
  { sensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentityPath :: Data.Text.Text -- ^ Drive path (e.g. /dev/disk)
  , sensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentitySerialNumber :: Data.Text.Text -- ^ Drive serial number
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property path missing") (\val -> case val of
                                                                                                                                                                                                                                       Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                       _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "path") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property serialNumber missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                      Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                                      _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "serialNumber") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity
    where toJSON (SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity a1
                                                                                       a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "path") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                                             (,) (Data.Text.pack "serialNumber") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2])

data SensorResponseMessageSensor_response_typeRaid_dataDrivesItem = SensorResponseMessageSensor_response_typeRaid_dataDrivesItem
  { sensorResponseMessageSensor_response_typeRaid_dataDrivesItemStatus :: Data.Text.Text -- ^ Drive status (U, _)
  , sensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeRaid_dataDrivesItemIdentity
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeRaid_dataDrivesItem

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeRaid_dataDrivesItem

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeRaid_dataDrivesItem
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessageSensor_response_typeRaid_dataDrivesItem GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property status missing") (\val -> case val of
                                                                                                                                                                                                                                 Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                 _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "status") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "identity") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeRaid_dataDrivesItem
    where toJSON (SensorResponseMessageSensor_response_typeRaid_dataDrivesItem a1
                                                                               a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "status") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                                     (,) (Data.Text.pack "identity") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a2])

data SensorResponseMessageSensor_response_typeRaid_data = SensorResponseMessageSensor_response_typeRaid_data
  { sensorResponseMessageSensor_response_typeRaid_dataHostId :: Data.Text.Text -- ^ Hostname of system
  , sensorResponseMessageSensor_response_typeRaid_dataDevice :: Data.Text.Text -- ^ md device
  , sensorResponseMessageSensor_response_typeRaid_dataDrives :: [SensorResponseMessageSensor_response_typeRaid_dataDrivesItem] -- ^ Constituent drives
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_typeRaid_data

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_typeRaid_data

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_typeRaid_data
    where parseJSON (Data.Aeson.Types.Object obj) = do ((GHC.Base.pure SensorResponseMessageSensor_response_typeRaid_data GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property hostId missing") (\val -> case val of
                                                                                                                                                                                                                        Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                        _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "hostId") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property device missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                   Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                   _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "device") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property drives missing") (\val -> case val of
ata.Aeson.Types.Array arr -> do {Control.Monad.unless (Data.Vector.length arr GHC.Classes.>= 2) (GHC.Base.fail "array must have at least 2 items");
ata.Traversable.mapM Data.Aeson.parseJSON (Data.Vector.toList arr)}
ase.fail "not an array") (Data.HashMap.Lazy.lookup (Data.Text.pack "drives") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_typeRaid_data
    where toJSON (SensorResponseMessageSensor_response_typeRaid_data a1
                                                                     a2
                                                                     a3) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "hostId") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                           (,) (Data.Text.pack "device") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                                           (,) (Data.Text.pack "drives") Data.Functor.<$> (GHC.Base.Just GHC.Base.. (Data.Aeson.Types.Array GHC.Base.. (Data.Vector.fromList GHC.Base.. GHC.Base.map Data.Aeson.toJSON))) a3])

data SensorResponseMessageSensor_response_type = SensorResponseMessageSensor_response_type
  { sensorResponseMessageSensor_response_typeSnmp_trap :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeSnmp_trap -- ^ SNMP Trap Information
  , sensorResponseMessageSensor_response_typeDisk_status_hpi :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeDisk_status_hpi
  , sensorResponseMessageSensor_response_typeIf_data :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeIf_data -- ^ Network Interface Data
  , sensorResponseMessageSensor_response_typeHost_update :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeHost_update
  , sensorResponseMessageSensor_response_typeDisk_status_drivemanager :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeDisk_status_drivemanager
  , sensorResponseMessageSensor_response_typeService_watchdog :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeService_watchdog
  , sensorResponseMessageSensor_response_typeLocal_mount_data :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeLocal_mount_data -- ^ Local mount data
  , sensorResponseMessageSensor_response_typeExpander_reset :: GHC.Base.Maybe Data.Aeson.Types.Value -- ^ Expander Reset Occurred
  , sensorResponseMessageSensor_response_typeCpu_data :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeCpu_data -- ^ CPU Data
  , sensorResponseMessageSensor_response_typeRaid_data :: GHC.Base.Maybe SensorResponseMessageSensor_response_typeRaid_data -- ^ RAID Data
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessageSensor_response_type

instance Data.Hashable.Hashable SensorResponseMessageSensor_response_type

instance Data.Aeson.FromJSON SensorResponseMessageSensor_response_type
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((((((GHC.Base.pure SensorResponseMessageSensor_response_type GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "snmp_trap") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "disk_status_hpi") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "if_data") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "host_update") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "disk_status_drivemanager") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "service_watchdog") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "local_mount_data") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Expander Reset Occurred")} val of
ase.return ()
es_6 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_6);
ase.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "expander_reset") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "cpu_data") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "raid_data") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessageSensor_response_type
    where toJSON (SensorResponseMessageSensor_response_type a1
                                                            a2
                                                            a3
                                                            a4
                                                            a5
                                                            a6
                                                            a7
                                                            a8
                                                            a9
                                                            a10) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "snmp_trap") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a1,
                                                                                                                                                                   (,) (Data.Text.pack "disk_status_hpi") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a2,
                                                                                                                                                                   (,) (Data.Text.pack "if_data") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a3,
                                                                                                                                                                   (,) (Data.Text.pack "host_update") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a4,
                                                                                                                                                                   (,) (Data.Text.pack "disk_status_drivemanager") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a5,
                                                                                                                                                                   (,) (Data.Text.pack "service_watchdog") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a6,
                                                                                                                                                                   (,) (Data.Text.pack "local_mount_data") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a7,
                                                                                                                                                                   (,) (Data.Text.pack "expander_reset") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a8,
                                                                                                                                                                   (,) (Data.Text.pack "cpu_data") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a9,
                                                                                                                                                                   (,) (Data.Text.pack "raid_data") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a10])

data SensorResponseMessage = SensorResponseMessage
  { sensorResponseMessageSspl_ll_msg_header :: GHC.Base.Maybe Data.Aeson.Types.Value
  , sensorResponseMessageSensor_response_type :: SensorResponseMessageSensor_response_type
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponseMessage

instance Data.Hashable.Hashable SensorResponseMessage

instance Data.Aeson.FromJSON SensorResponseMessage
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure SensorResponseMessage GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                     [] -> GHC.Base.return ()
                                                                                                                                                     es_7 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_7);
                                                                                                                                                GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "sspl_ll_msg_header") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property sensor_response_type missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "sensor_response_type") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponseMessage
    where toJSON (SensorResponseMessage a1
                                        a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "sspl_ll_msg_header") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a1,
                                                                                                                                              (,) (Data.Text.pack "sensor_response_type") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.toJSON) a2])

data SensorResponse = SensorResponse
  { sensorResponseSignature :: Data.Text.Text -- ^ Authentication signature of message
  , sensorResponseTime :: Data.Text.Text -- ^ The time the signature was generated
  , sensorResponseExpires :: GHC.Base.Maybe Prelude.Integer -- ^ The number of secs the signature remains valid after being generated
  , sensorResponseUsername :: Data.Text.Text -- ^ Username who generated message
  , sensorResponseMessage :: SensorResponseMessage
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary SensorResponse

instance Data.Hashable.Hashable SensorResponse

instance Data.Aeson.FromJSON SensorResponse
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((GHC.Base.pure SensorResponse GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property signature missing") (\val -> case val of
                                                                                                                                                                                         Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                         _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "signature") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property time missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                     _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "time") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i_34 -> do GHC.Base.return i_34
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "expires") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property username missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Data.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "username") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property message missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "message") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON SensorResponse
    where toJSON (SensorResponse a1
                                 a2
                                 a3
                                 a4
                                 a5) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "signature") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                       (,) (Data.Text.pack "time") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                       (,) (Data.Text.pack "expires") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                       (,) (Data.Text.pack "username") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                       (,) (Data.Text.pack "message") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.toJSON) a5])