{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE StandaloneDeriving #-}

module SSPL.Bindings.CommandRequest where

import Control.Monad
import Data.Aeson
import Data.Aeson.Schema.Choice
import Data.Aeson.Schema.Types
import Data.Aeson.Schema.Validator
import Data.Aeson.Types
import Data.Aeson.Types
import Data.Binary
import Data.Either
import Data.Foldable
import Data.Functor
import Data.HashMap.Lazy
import Data.Hashable
import Data.Map
import Data.Maybe
import Data.Ratio
import Data.Scientific
import Data.Text
import Data.Traversable
import Data.Typeable
import GHC.Base
import GHC.Classes
import GHC.Generics
import GHC.Num
import GHC.Show
import Prelude
import SSPL.Bindings.Instances ()
import Text.Regex
import Text.Regex.PCRE.String

graph :: Data.Aeson.Schema.Types.Graph Data.Aeson.Schema.Types.Schema
                                       Data.Text.Text

graph = Data.Map.fromList [(Data.Text.pack "CommandRequest",
                            Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                          Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "signature",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Authentication signature of message")}),
                                                                                                                                 (Data.Text.pack "time",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "The time the signature was generated")}),
                                                                                                                                 (Data.Text.pack "expires",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.IntegerType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "The number of secs the signature remains valid after being generated")}),
                                                                                                                                 (Data.Text.pack "username",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Username who generated message")}),
                                                                                                                                 (Data.Text.pack "message",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "serviceRequest",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "command",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "start"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "stop"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "restart"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "enable"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "disable"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "status")]}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "serviceName",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Name of the service to control.")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "nodes",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Regex on node FQDNs. If not specified, applies to all nodes.")})]}),
                                                                                                                                                                                                                                       (Data.Text.pack "nodeStatusChangeRequest",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "command",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "enable"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "disable"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "poweron"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "poweroff")]}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "nodes",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Regex on node FQDNs. If not specified, applies to all nodes.")})]}),
                                                                                                                                                                                                                                       (Data.Text.pack "statusRequest",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "entityFilter",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Filter on entities to query. Interpretation is dependent on entity type. If not specified, applies to all entities of the given type.")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "entityType",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "cluster"),
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Aeson.Types.String (Data.Text.pack "node")],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Type of entity to query the status of.")})]}),
                                                                                                                                                                                                                                       (Data.Text.pack "messageId",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Used to identify a response if a response is required.")})],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True})],
                                                          Data.Aeson.Schema.Types.schemaDSchema = GHC.Base.Just (Data.Text.pack "http://json-schema.org/draft-03/schema#")})]

data CommandRequestMessageServiceRequest = CommandRequestMessageServiceRequest
  { commandRequestMessageServiceRequestCommand :: Data.Aeson.Types.Value
  , commandRequestMessageServiceRequestServiceName :: Data.Text.Text -- ^ Name of the service to control.
  , commandRequestMessageServiceRequestNodes :: GHC.Base.Maybe Data.Text.Text -- ^ Regex on node FQDNs. If not specified, applies to all nodes.
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary CommandRequestMessageServiceRequest

instance Data.Hashable.Hashable CommandRequestMessageServiceRequest

instance Data.Aeson.FromJSON CommandRequestMessageServiceRequest
    where parseJSON (Data.Aeson.Types.Object obj) = do ((GHC.Base.pure CommandRequestMessageServiceRequest GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property command missing") (\val -> do {Control.Monad.unless (val `Data.Foldable.elem` [Data.Aeson.Types.String (Data.Text.pack "start"),
                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "stop"),
                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "restart"),
                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "enable"),
                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "disable"),
                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "status")]) (GHC.Base.fail "not one of the values in enum");
                                                                                                                                                                                                          (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "start"),
                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "stop"),
                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "restart"),
                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "enable"),
                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "disable"),
                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.String (Data.Text.pack "status")]} val of
                                                                                                                                                                                                                            [] -> GHC.Base.return ()
                                                                                                                                                                                                                            es -> GHC.Base.fail GHC.Base.$ Prelude.unlines es);
                                                                                                                                                                                                                       GHC.Base.return val}) val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "command") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property serviceName missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                 _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "serviceName") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "nodes") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON CommandRequestMessageServiceRequest
    where toJSON (CommandRequestMessageServiceRequest a1
                                                      a2
                                                      a3) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "command") Data.Functor.<$> (GHC.Base.Just GHC.Base.. GHC.Base.id) a1,
                                                                                                                                                            (,) (Data.Text.pack "serviceName") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                            (,) (Data.Text.pack "nodes") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a3])

data CommandRequestMessageNodeStatusChangeRequest = CommandRequestMessageNodeStatusChangeRequest
  { commandRequestMessageNodeStatusChangeRequestCommand :: Data.Aeson.Types.Value
  , commandRequestMessageNodeStatusChangeRequestNodes :: GHC.Base.Maybe Data.Text.Text -- ^ Regex on node FQDNs. If not specified, applies to all nodes.
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary CommandRequestMessageNodeStatusChangeRequest

instance Data.Hashable.Hashable CommandRequestMessageNodeStatusChangeRequest

instance Data.Aeson.FromJSON CommandRequestMessageNodeStatusChangeRequest
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure CommandRequestMessageNodeStatusChangeRequest GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property command missing") (\val -> do {Control.Monad.unless (val `Data.Foldable.elem` [Data.Aeson.Types.String (Data.Text.pack "enable"),
                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "disable"),
                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "poweron"),
                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "poweroff")]) (GHC.Base.fail "not one of the values in enum");
                                                                                                                                                                                                                  (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "enable"),
                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "disable"),
                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "poweron"),
                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "poweroff")]} val of
                                                                                                                                                                                                                                    [] -> GHC.Base.return ()
                                                                                                                                                                                                                                    es_1 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_1);
                                                                                                                                                                                                                               GHC.Base.return val}) val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "command") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                          Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                          _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "nodes") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON CommandRequestMessageNodeStatusChangeRequest
    where toJSON (CommandRequestMessageNodeStatusChangeRequest a1
                                                               a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "command") Data.Functor.<$> (GHC.Base.Just GHC.Base.. GHC.Base.id) a1,
                                                                                                                                                                     (,) (Data.Text.pack "nodes") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a2])

data CommandRequestMessageStatusRequest = CommandRequestMessageStatusRequest
  { commandRequestMessageStatusRequestEntityFilter :: GHC.Base.Maybe Data.Text.Text -- ^ Filter on entities to query. Interpretation is dependent on entity type. If not specified, applies to all entities of the given type.
  , commandRequestMessageStatusRequestEntityType :: Data.Aeson.Types.Value -- ^ Type of entity to query the status of.
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary CommandRequestMessageStatusRequest

instance Data.Hashable.Hashable CommandRequestMessageStatusRequest

instance Data.Aeson.FromJSON CommandRequestMessageStatusRequest
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure CommandRequestMessageStatusRequest GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
                                                                                                                                                             Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                             _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "entityFilter") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property entityType missing") (\val -> do {Control.Monad.unless (val `Data.Foldable.elem` [Data.Aeson.Types.String (Data.Text.pack "cluster"),
                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "node")]) (GHC.Base.fail "not one of the values in enum");
                                                                                                                                                                                                                                                                                                                                                                  (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "cluster"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Data.Aeson.Types.String (Data.Text.pack "node")],
                                                                                                                                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Type of entity to query the status of.")} val of
                                                                                                                                                                                                                                                                                                                                                                                    [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                                                                                    es_2 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_2);
                                                                                                                                                                                                                                                                                                                                                                               GHC.Base.return val}) val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "entityType") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON CommandRequestMessageStatusRequest
    where toJSON (CommandRequestMessageStatusRequest a1
                                                     a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "entityFilter") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a1,
                                                                                                                                                           (,) (Data.Text.pack "entityType") Data.Functor.<$> (GHC.Base.Just GHC.Base.. GHC.Base.id) a2])

data CommandRequestMessage = CommandRequestMessage
  { commandRequestMessageServiceRequest :: GHC.Base.Maybe CommandRequestMessageServiceRequest
  , commandRequestMessageNodeStatusChangeRequest :: GHC.Base.Maybe CommandRequestMessageNodeStatusChangeRequest
  , commandRequestMessageStatusRequest :: GHC.Base.Maybe CommandRequestMessageStatusRequest
  , commandRequestMessageMessageId :: GHC.Base.Maybe Data.Text.Text -- ^ Used to identify a response if a response is required.
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary CommandRequestMessage

instance Data.Hashable.Hashable CommandRequestMessage

instance Data.Aeson.FromJSON CommandRequestMessage
    where parseJSON (Data.Aeson.Types.Object obj) = do (((GHC.Base.pure CommandRequestMessage GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "serviceRequest") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "nodeStatusChangeRequest") obj)) GHC.Base.<*> Data.Traversable.traverse Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "statusRequest") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "messageId") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON CommandRequestMessage
    where toJSON (CommandRequestMessage a1
                                        a2
                                        a3
                                        a4) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "serviceRequest") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a1,
                                                                                                                                              (,) (Data.Text.pack "nodeStatusChangeRequest") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a2,
                                                                                                                                              (,) (Data.Text.pack "statusRequest") Data.Functor.<$> GHC.Base.fmap Data.Aeson.toJSON a3,
                                                                                                                                              (,) (Data.Text.pack "messageId") Data.Functor.<$> GHC.Base.fmap Data.Aeson.Types.String a4])

data CommandRequest = CommandRequest
  { commandRequestSignature :: Data.Text.Text -- ^ Authentication signature of message
  , commandRequestTime :: Data.Text.Text -- ^ The time the signature was generated
  , commandRequestExpires :: GHC.Base.Maybe Prelude.Integer -- ^ The number of secs the signature remains valid after being generated
  , commandRequestUsername :: Data.Text.Text -- ^ Username who generated message
  , commandRequestMessage :: CommandRequestMessage
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary CommandRequest

instance Data.Hashable.Hashable CommandRequest

instance Data.Aeson.FromJSON CommandRequest
    where parseJSON (Data.Aeson.Types.Object obj) = do ((((GHC.Base.pure CommandRequest GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property signature missing") (\val -> case val of
                                                                                                                                                                                         Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                         _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "signature") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property time missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                     _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "time") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> case val of
ata.Aeson.Types.Number num -> case Data.Scientific.floatingOrInteger num of
ata.Either.Right i -> do GHC.Base.return i
ase.fail "not an integer"
ase.fail "not an integer") (Data.HashMap.Lazy.lookup (Data.Text.pack "expires") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property username missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "username") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property message missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "message") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON CommandRequest
    where toJSON (CommandRequest a1
                                 a2
                                 a3
                                 a4
                                 a5) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "signature") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                       (,) (Data.Text.pack "time") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                       (,) (Data.Text.pack "expires") Data.Functor.<$> GHC.Base.fmap (Data.Aeson.Types.Number GHC.Base.. GHC.Num.fromInteger) a3,
                                                                                                                                       (,) (Data.Text.pack "username") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a4,
                                                                                                                                       (,) (Data.Text.pack "message") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.toJSON) a5])