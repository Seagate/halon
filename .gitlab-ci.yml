# Globals ----------------------------------------------------------------- {{{1
#

variables:
  GIT_DEPTH: 1  # clone only the current commit
  GIT_STRATEGY: clone  # make a fresh `git clone` of the repo for every new CI job
  GIT_SUBMODULE_STRATEGY: normal  # init and check out submodules
  M0_VG_NO_SYMLINKS: "true"
  WORKSPACE_NAME: "${CI_PROJECT_NAME}${CI_PIPELINE_ID}"
  WORKSPACE_DIR:  "/home/gitlab-runner/workspaces/${CI_PROJECT_NAME}${CI_PIPELINE_ID}"

stages:
  - setup-workspace
  - build-mero
  - build
  - test
  - cleanup

before_script:
  - date -u -Isec
  - git log -1 --pretty=fuller
  - printenv

after_script:
  - date -u -Isec


# Build ------------------------------------------------------------------- {{{1
#

setup-workspace:
  stage: setup-workspace
  tags: [ m0vg ]
  except: [ master, tags ]

  script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export PREFIX="${WORKSPACE_NAME}"

    - sudo rm -rf ${WORKSPACE_DIR}
    - mkdir -p ${WORKSPACE_DIR}
    - cp -a ../${CI_PROJECT_NAME} ${WORKSPACE_DIR}

build-mero:
  stage: build-mero
  tags: [ m0vg ]
  except: [ master, tags ]

  script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export PREFIX="${WORKSPACE_NAME}"

    - cd ${WORKSPACE_DIR}

    # get fresh Mero copy
    - test -d mero ||
      git clone --recursive --depth 1 --shallow-submodules http://gitlab.mero.colo.seagate.com/mero/mero.git

    # build Mero
    - time docker run --rm --name ${PREFIX}-build
                      -v ~+:/data -w /data/mero
                  registry.gitlab.mero.colo.seagate.com/mero/mero:7.5
                      bash -c "KERNEL=/lib/modules/\$(yum list installed kernel | tail -n1 | awk '{ print \$2 }').x86_64/build ;
                               ./autogen.sh &&
                               ./configure --with-linux=\$KERNEL &&
                               make -j10"

    # containers run commands as 'root' user, seize ownershipt back
    - sudo chown -R $(id -u):$(id -g) .

build:halon:
  stage: build
  tags: [ m0vg ]
  except: [ master, tags ]

  script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export PREFIX="${WORKSPACE_NAME}"

    - cd ${WORKSPACE_DIR}

    # build Halon
    - time docker run --rm --name ${PREFIX}-build
                      -v ~+:/data -w /data/${CI_PROJECT_NAME}
                  registry.gitlab.mero.colo.seagate.com/mero/halon:7.5
                      ./scripts/h0 make -j10

    # containers run commands as 'root' user, seize ownershipt back
    - sudo chown -R $(id -u):$(id -g) .


# Unit Tests -------------------------------------------------------------- {{{1
#

UT:
  stage: test
  tags: [ m0vg ]
  except: [ master, tags ]

  before_script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export PREFIX="${WORKSPACE_NAME}ut"

    - date -u -Isec
    - git log -1 --pretty=fuller
    - printenv
    - cd ${WORKSPACE_DIR}

    - |
      test -d m0vg-ut ||
      git clone --recursive --depth 1 --shallow-submodules \
                http://gitlab.mero.colo.seagate.com/mero/mero.git \
                m0vg-ut

    # prepare m0vg ut VM
    - |
      ./m0vg-ut/scripts/m0vg env add <<EOF
      M0_VM_BOX=centos75/dev-halon
      M0_VM_BOX_URL='http://ci-storage.mero.colo.seagate.com/vagrant/centos75/dev-halon'
      M0_VM_CMU_MEM_MB=4096
      M0_VM_NAME_PREFIX=${PREFIX}
      M0_VM_HOSTNAME_PREFIX=${PREFIX}
      EOF
    - time ./m0vg-ut/scripts/m0vg up cmu
    - time ./m0vg-ut/scripts/m0vg reload cmu

  script:
    - date -u -Isec
    - time ./m0vg-ut/scripts/m0vg run /data/halon/scripts/h0 test


# System Tests (singlenode) ----------------------------------------------- {{{1
#

ST singlenode:
  stage: test
  tags: [ m0vg ]
  except: [ master, tags ]

  before_script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export PREFIX="${WORKSPACE_NAME}s"

    - date -u -Isec
    - git log -1 --pretty=fuller
    - printenv
    - cd ${WORKSPACE_DIR}

    - |
      test -d m0vg-single ||
      git clone --recursive --depth 1 --shallow-submodules \
                http://gitlab.mero.colo.seagate.com/mero/mero.git \
                m0vg-single

    # prepare m0vg singlenode
    - |
      ./m0vg-single/scripts/m0vg env add <<EOF
      M0_VM_BOX=centos75/dev-halon
      M0_VM_BOX_URL='http://ci-storage.mero.colo.seagate.com/vagrant/centos75/dev-halon'
      M0_VM_CMU_MEM_MB=4096
      M0_VM_NAME_PREFIX=${PREFIX}
      M0_VM_HOSTNAME_PREFIX=${PREFIX}
      EOF
    - time ./m0vg-single/scripts/m0vg up cmu
    - time ./m0vg-single/scripts/m0vg reload cmu

  script:
    - date -u -Isec
    - time ./m0vg-single/scripts/m0vg run "${M0_VERBOSE:+M0_VERBOSE=1}
                                           /data/halon/scripts/h0 run-st"

  after_script:
    - date -u -Isec
    - cd ${WORKSPACE_DIR}

    # fetch syslog
    - ./m0vg-single/scripts/m0vg run
            sudo journalctl --no-pager --full --utc --boot
                            --output short-precise
                            > $CI_PROJECT_DIR/st-single_syslog.log

    # fetch halon.decision.log
    - ./m0vg-single/scripts/m0vg scp
            cmu:/var/log/halon.decision.log
            $CI_PROJECT_DIR/st-single_halon.decision.log

  artifacts:
    name: "$CI_PROJECT_NAME job $CI_JOB_ID ($CI_JOB_NAME) logs"
    when: always  # whenever the job has failed or succeeded
    paths:
      - st-single_syslog.log
      - st-single_halon.decision.log


# System Tests (multinode) ------------------------------------------------ {{{1
#

ST multinode:
  stage: test
  tags: [ m0vg ]
  except: [ master, tags ]

  before_script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export PREFIX="${WORKSPACE_NAME}m"

    - date -u -Isec
    - git log -1 --pretty=fuller
    - printenv
    - cd ${WORKSPACE_DIR}

    - |
      test -d m0vg-multi ||
      git clone --recursive --depth 1 --shallow-submodules \
                http://gitlab.mero.colo.seagate.com/mero/mero.git \
                m0vg-multi

    # prepare m0vg cluster
    - |
      ./m0vg-multi/scripts/m0vg env add <<EOF
      M0_VM_BOX=centos75/dev-halon
      M0_VM_BOX_URL='http://ci-storage.mero.colo.seagate.com/vagrant/centos75/dev-halon'
      M0_VM_CMU_MEM_MB=4096
      M0_VM_NAME_PREFIX=${PREFIX}
      M0_VM_HOSTNAME_PREFIX=${PREFIX}
      EOF
    - time ./m0vg-multi/scripts/m0vg up cmu /ssu/ /client/
    - time ./m0vg-multi/scripts/m0vg reload cmu /ssu/ /client/

    # generate m0genfacts cluster config
    - |
      cat <<EOF > m0-cluster.yaml
          confds: [ ${PREFIX}-cmu.local ]
          ssus:
            - host: ${PREFIX}-ssu1.local
              disks: /dev/vd[b-g]
            - host: ${PREFIX}-ssu2.local
              disks: /dev/vd[b-g]
          clients: [ ${PREFIX}-client1.local ]
          clovis-apps: [ ${PREFIX}-client1.local ]
      EOF
    - cat m0-cluster.yaml

  script:
    - date -u -Isec
    - time ./m0vg-multi/scripts/m0vg run "${M0_VERBOSE:+M0_VERBOSE=1}
                                          M0_CLUSTER=/data/m0-cluster.yaml
                                          SAT=${PREFIX}-ssu1
            /data/halon/scripts/h0 run-st 'multinode.t_*'"

  after_script:
    - date -u -Isec
    - cd ${WORKSPACE_DIR}

    # fetch syslog
    - ./m0vg-multi/scripts/m0vg run
            sudo journalctl --no-pager --full --utc --boot
                            --output short-precise
                            > $CI_PROJECT_DIR/st-multi_syslog.log

    # fetch halon.decision.log
    - ./m0vg-multi/scripts/m0vg scp
            cmu:/var/log/halon.decision.log
            $CI_PROJECT_DIR/st-multi_halon.decision.log

  artifacts:
    name: "$CI_PROJECT_NAME job $CI_JOB_ID ($CI_JOB_NAME) logs"
    when: always  # whenever the job has failed or succeeded
    paths:
      - st-multi_syslog.log
      - st-multi_halon.decision.log


# Cleanup ----------------------------------------------------------------- {{{1
#

cleanup:
  stage: cleanup
  tags: [ m0vg ]
  except: [ master, tags ]
  when: always
  dependencies: []  # empty deps list prevents unneeded artifacts downloading

  variables:
    # If a branch is updated while CI tests for the older commit are still
    # being run, the checkout phase of 'cleanup' job will fail (thus cleanup
    # script will not run) unless GIT_DEPTH is deep enough to include the older
    # commit. Cloning 30 latest commits seems to be good enough - it's quite
    # rare for people to push more than 30 new commits in one go.
    GIT_DEPTH: 30

  script:
    - cd ${WORKSPACE_DIR}
    - ./m0vg-ut/scripts/m0vg destroy -f || true
    - ./m0vg-single/scripts/m0vg destroy -f || true
    - ./m0vg-multi/scripts/m0vg destroy -f || true

# vim: foldmethod=marker shiftwidth=2 tabstop=2 expandtab
