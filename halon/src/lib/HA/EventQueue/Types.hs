-- |
-- Copyright : (C) 2015 Seagate Technology Limited.
-- License   : All rights reserved.
--
module HA.EventQueue.Types
    ( HAEvent(..)
    , UUID
    , PersistMessage(..)
    , newPersistMessage
    , DoTrimUnknown(..)
    , EQStatReq(..)
    , EQStatResp(..)
    , PoolStats(..)
    ) where

import Control.Distributed.Process
import Control.Distributed.Process.Pool.Bounded (PoolStats(..))
import Control.Distributed.Process.Serializable (Serializable)
import Control.Monad.Trans (MonadIO(..))

import Data.Binary (Binary)
import Data.Function (on)
import Data.Typeable (Typeable)
import Data.UUID (UUID)
import Data.UUID.V4 (nextRandom)

import GHC.Generics (Generic)

-- | An HA event. Generated by satellites.
data HAEvent a = HAEvent
    { eventId      :: {-# UNPACK #-} !UUID
    , eventPayload :: a
    , eventHops    :: [ProcessId]
    } deriving (Generic, Typeable)

instance Binary a => Binary (HAEvent a)

instance Eq (HAEvent a) where
    (==) = (==) `on` eventId

instance Ord (HAEvent a) where
    compare = compare `on` eventId

data PersistMessage =
    PersistMessage
    { persistEventId :: !UUID
    , persistMsg     :: !Message
    } deriving (Generic, Show, Typeable)

instance Binary PersistMessage

instance Eq PersistMessage where
    (==) = (==) `on` persistEventId

instance Ord PersistMessage where
    compare = compare `on` persistEventId

newPersistMessage :: (Serializable a, MonadIO m) => a -> m PersistMessage
newPersistMessage msg = liftIO $ do
    uuid <- nextRandom
    let evt = HAEvent
              { eventId      = uuid
              , eventPayload = msg
              , eventHops    = []
              }
    return PersistMessage
           { persistEventId = uuid
           , persistMsg     = wrapMessage evt
           }

-- | Request EQ to remove message of type that is unknown.
data DoTrimUnknown = DoTrimUnknown Message deriving (Typeable, Generic)

instance Binary DoTrimUnknown

-- | Request for EQ statistics
data EQStatReq = EQStatReq ProcessId
  deriving (Generic, Typeable)

instance Binary EQStatReq

data EQStatResp =
    EQStatResp {
        eqs_queue_size :: !Int
      , eqs_uuids :: ![UUID]
      , eqs_pool_stats :: !PoolStats
    }
  | EQStatRespCannotBeFetched
  deriving (Generic, Typeable)

instance Binary EQStatResp
