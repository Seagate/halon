{-# LANGUAGE TemplateHaskell #-}
-- |
-- Copyright : (C) 2015 Seagate Technology Limited.
-- License   : All rights reserved.
--
module HA.EventQueue.Types
    ( HAEvent(..)
    , UUID
    , newPersistMessage
    , PersistMessage
    , persistMessageId
    , DoClearEQ(..)
    , DoneClearEQ(..)
    , EQStatReq(..)
    , EQStatResp(..)
    , PoolStats(..)
    , eventQueueLabel
    ) where

import Control.Distributed.Process
import Control.Distributed.Process.Pool.Bounded (PoolStats(..))
import Control.Monad.Trans (MonadIO(..))

import Data.Binary (Binary)
import Data.Function (on)
import Data.Typeable (Typeable)
import Data.UUID (UUID)
import Data.UUID.V4 (nextRandom)
import Data.PersistMessage
import GHC.Generics (Generic)
import HA.SafeCopy

-- | An HA event. Generated by satellites.
data HAEvent a = HAEvent
    { eventId      :: {-# UNPACK #-} !UUID
    , eventPayload :: a
    } deriving (Generic, Typeable)

instance Eq (HAEvent a) where
    (==) = (==) `on` eventId

instance Ord (HAEvent a) where
    compare = compare `on` eventId

deriveSafeCopy 0 'base ''HAEvent

newPersistMessage :: (SafeCopy a, Typeable a, MonadIO m) => a -> m PersistMessage
newPersistMessage msg = liftIO $ do
    uuid <- nextRandom
    let evt = HAEvent
              { eventId      = uuid
              , eventPayload = msg
              }
    return $ persistMessage uuid evt

-- | Request to the EQ to remove all messages.
data DoClearEQ = DoClearEQ ProcessId deriving (Typeable, Generic)

instance Binary DoClearEQ

-- | Returned by the EQ when messages have been cleared.
data DoneClearEQ = DoneClearEQ deriving (Typeable, Generic)

instance Binary DoneClearEQ


-- | Request for EQ statistics
data EQStatReq = EQStatReq ProcessId
  deriving (Generic, Typeable)

instance Binary EQStatReq

data EQStatResp =
    EQStatResp {
        eqs_queue_size :: !Int
      , eqs_uuids :: ![UUID]
      , eqs_pool_stats :: !PoolStats
    }
  | EQStatRespCannotBeFetched
  deriving (Generic, Typeable)

instance Binary EQStatResp

-- | Since there is at most one Event Queue per tracking station node,
-- the @eventQueueLabel@ is used to register and lookup the Event Queue of a
-- node.
eventQueueLabel :: String
eventQueueLabel = "HA.EventQueue"
