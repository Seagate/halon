distributed-commands tests are not built/run by default in non-rpc mode.

Environmental setup for tests:

* To test using Digital Ocean:
  * you need digital ocean credentials set in the environment
    get these from Google Drive in a file called "Access Tokens"
        export DO_CLIENT_ID=...
        export DO_API_KEY=...
  * you need to specify the image_id to use for tests in the environment
    variable DC_DO_IMAGEID. It must have a user dev. And ssh must be
    configured to allow copying files from machine to machine without
    prompting the user with questions.
  * if you use the droplet test snapshot you need an ssh key that is
    known to it - ask someone like @facundo to give you such an ssh key
  * export DC_PROVIDER=digital-ocean

* To test using docker:
  * export DOCKER_HOSTNAME=  <your docker API endpoint>
  * export DC_PROVIDER=docker

To build and run the tests:
in halon/ root directory, after building halon ok, do this:

 cabal install --enable-tests --run-tests --flag="distributed-tests" --reinstall distributed-commands

This command will build distributed-commands and run the tests
against the chosen cloud provider.

If the tests fail or you kill them part way, you might find some
processes left behind without a parent; these processes
(for example, scp) might cause subsequent attempts to run the
tests to fail by occupying port localhost:4000. Kill them manually.

Tracing

distributed-commands can enable tracing on all processes. This is done by
propagating the trace-related environment variables to to the remote hosts
and having them trace to a file. Then after the test completes, it can gather
all the files that were created. See 'TraceEnv' and 'mkTraceEnv'.

Tracing is enabled by setting the environment variables
DISTRIBUTED_PROCESS_TRACE_FLAGS and DISTRIBUTED_PROCESS_TRACE_FILE as explained
in

http://hackage.haskell.org/package/distributed-process/docs/Control-Distributed-Process-Debug.html


