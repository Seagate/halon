#!/usr/bin/env bash
. $H0_SRC_DIR/st/common

SAT='ssu1'

prepare_cluster_conf() {
    export M0_CLUSTER=$(mktemp)
    trap "rm $M0_CLUSTER" 0

    cat >$M0_CLUSTER <<EOF
confds: [ cmu.local ]
ssus:
  - host:  $SAT.local
    disks: /dev/sd[b-g]
  - host:  ssu2.local
    disks: /dev/sd[b-g]
clovis-apps: [ client1.local ]
EOF
}

## Initialises FID_NODE_SAT, FID_PROC_SAT and FID_PROC_M0D environment
## variables, getting them from `hctl mero status` output.
##
## Fails unless all three fids are online.
init_fid_vars() {
    (($# == 1)) || die "${FUNCNAME[0]}: Invalid usage"
    . <(hctl mero status | awk -v HOST=$1 '
function check(v) {
    if (!v) {
        print "Parsing error" > "/dev/stderr"
        exit(1)
    }
    return v
}

$3 ~ /^0x6e/ {
    collect_p = ($4 == HOST)
    if (collect_p)
        node = $3
}

collect_p && $3 ~ /^0x72/ {
    if ($5 == "halon")
        proc_halond = $3
    else if ($5 == "ioservice")
        proc_m0d = $3
}

END {
    print "FID_NODE_SAT=" check(node)
    print "FID_PROC_SAT=" check(proc_halond)
    print "FID_PROC_M0D=" check(proc_m0d)
}
')
}

prepare_cluster_conf
pdsh -S -w $(cluster_hosts) true  # fail unless all hosts are accessible

$H0 init
cluster_bootstrap
init_fid_vars $SAT

for fid in $FID_NODE_SAT $FID_PROC_SAT $FID_PROC_M0D; do
    [[ $(fid_state $fid) = 'online' ]] || die "$fid is not online"
done
m0d_old=$(ssh $SAT.local pgrep m0d)

ssh $SAT.local sudo pkill -KILL halond  # kill SAT halond
sleep 2  # give RC some time to realise what has just happened

[[ $(fid_state $FID_PROC_M0D) != 'online' ]] ||
    die 'm0d is still marked as "online"'

wait_for_fid_state 'online' $FID_PROC_M0D

# We know that RC restarts halond before m0d, but it doesn't hurt to
# check halond's state as well.
[[ $(fid_state $FID_PROC_SAT) == 'online' ]] || die 'SAT is not online'

m0d_new=$(ssh $SAT.local pgrep m0d)
[[ -n $m0d_new ]] || die 'm0d is not running'
[[ $m0d_new != $m0d_old ]] || die 'm0d has not been restarted'

hctl mero stop
$H0 fini

report_and_exit ${0##*/} $?
