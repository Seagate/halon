# -*- sh -*-
###
### Common code used by st/t_* scripts.
###

set -eu -o pipefail
set -x
export PS4='+ [${FUNCNAME[0]:+${FUNCNAME[0]}:}${LINENO}] '

H0=$H0_SRC_DIR/scripts/h0

. $H0_SRC_DIR/scripts/functions

# NOTE: There is no point in using `report_and_exit` when it is known
# in advance that the exit code will be non-zero. Use `die` or `exit`
# in such cases.
report_and_exit() {
    (($# == 2)) || die "${FUNCNAME[0]}: Invalid usage"
    local name=$1
    local rc=$2

    if ((rc == 0)); then
        # This message is used by Jenkins CI as test success criteria;
        # it must appear on stdout.
        echo "$name: test status: SUCCESS"
    else
        echo "$name: FAILURE $rc" >&2
    fi
    exit $rc
}

cluster_bootstrap() {
    hctl mero bootstrap ${M0_VERBOSE:+--verbose}

    # Display bootstrap progress, usually it completes under a minute.
    if [[ -t 1 ]]; then
        watch -d hctl mero status &
        sleep 90
        kill %watch
        reset  # `kill %watch` might have left the terminal broken
    else
        hctl mero status
        sleep 90
    fi

    local rc=0
    # Possible failure of m0t1fs has no impact on exit code of
    # `hctl mero bootstrap` command above.
    if hctl mero status | grep -q failed; then
        rc=1
    else
        _wait_for_m0t1fs $(_m0t1fs_hosts)
    fi

    hctl mero status
    return $rc
}

fid_state() {
    (($# == 1)) || die "${FUNCNAME[0]}: Invalid usage"
    _assert_is_fid $1
    hctl mero status | awk -v FID=$1 '$3 == FID {print $2}' | sed 's/]$//'
}

wait_for_fid_state() {
    (($# == 2)) || die "${FUNCNAME[0]}: Invalid usage"
    local state=$1
    _assert_is_fid $2
    local fid=$2
    local steps_left=12
    local started=$(_epoch_time)

    set +x  # silence the loop
    echo -n "Waiting for $fid to become '$state'..."
    until [[ $(fid_state $fid) == $state ]]; do
        sleep 5
        echo -n '.'
        ((--steps_left > 0)) || die "Giving up after $(_elapsed $started)"
    done
    echo ' done'
    set -x
}

check_drive_state() {
    (($# == 2)) || die "${FUNCNAME[0]}: Invalid usage"
    local expected="$1"
    local serial="$2"

    local out=$(hctl debug print drive --serial $serial)
    echo "$out"
    local actual=$(echo "$out" | sed -n 's/^  state: //p')
    [[ $actual == $expected ]]
}

wait_for_drive_state() {
    (($# == 2)) || die "${FUNCNAME[0]}: Invalid usage"
    local expected="$1"
    local serial="$2"
    local steps_left=90
    local started=$(_epoch_time)
    local sav=
    local out
    local actual

    set +x  # silence the loop
    while true; do
        out=$(hctl debug print drive --serial $serial)
        if [[ "$out" != "$sav" ]]; then
            echo
            echo "@$(_epoch_time) ($(date '+%F %T'))"
            if [[ -z $sav ]]; then
                echo "$out"
            else
                echo "$out" | diff -u <(echo "$sav") - \
                                   --label old --label new || true
            fi
            sav="$out"
            actual=$(echo "$out" | sed -n 's/^  state: //p')
            [[ $actual == $expected ]] && break
        fi
        sleep 2
        ((--steps_left > 0)) || {
            local elapsed=$(_elapsed $started)
            hctl mero status -d
            die "Giving up after $elapsed"
        }
    done
    set -x
}

# ----------------------------------------------------------------------
# Auxiliary functions
# (system tests are not supposed to use them directly)

## Outputs comma-separated list of hosts with m0t1fs mountpoints.
_m0t1fs_hosts() {
    if [[ -n $M0_CLUSTER ]]; then
        cat $M0_CLUSTER | python -c '
from __future__ import print_function
import sys
import yaml

cfg = yaml.safe_load(sys.stdin)
hosts = set(cfg.get("clients", []))
if hosts:
    print(",".join(hosts))
'
    else
        hostname
    fi
}

## Waits for m0t1fs to mount.
_wait_for_m0t1fs() {
    (($# > 0)) || return 0  # no m0t1fs clients

    local _sh="pdsh -S -w $*"
    if [[ $* == $(hostname) ]]; then
        _sh='bash -c'  # single-node
    fi
    local steps_left=30
    local started=$(_epoch_time)

    set +x  # silence the loop
    echo -n 'Waiting for m0t1fs to mount...'
    until $_sh 'mount | grep -q m0t1fs'; do
        sleep 2
        echo -n '.'
        ((--steps_left > 0)) ||
            die "Unable to mount m0t1fs. Giving up after $(_elapsed $started)"
    done
    echo ' done'
    set -x
}

_assert_is_fid() {
    (($# == 1)) || die "${FUNCNAME[0]}: Invalid usage"
    echo $1 | grep -qE '^0x[0-9a-f]{16}:0x[0-9a-f]{,16}$' ||
        die "${FUNCNAME[0]}: Fid expected, got '$1'"
}

_epoch_time() {
    date -u +%s
}

_elapsed() {
    (($# == 1)) || die "${FUNCNAME[0]}: Invalid usage"
    local started=$1  # the output of `_epoch_time`
    local elapsed=$(($(_epoch_time) - $started))

    echo "$elapsed seconds ($(date -d @$elapsed +%M:%S))"
}
