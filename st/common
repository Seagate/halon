# -*- sh -*-
###
### Common code used by st/t_* scripts.
###

set -eu -o pipefail
set -x
export PS4='+ [${FUNCNAME[0]:+${FUNCNAME[0]}:}${LINENO}] '

H0=$H0_SRC_DIR/scripts/h0

die() { echo "$@" >&2; exit 1; }

report_and_exit() {
    [ $# -eq 2 ] || die "${FUNCNAME[0]}: Invalid usage"
    local name=$1
    local rc=$2

    if [ $rc -eq 0 ]; then
        ## This message is used by Jenkins as a test success criteria;
        ## it must appear on stdout.
        echo "$name: test status: SUCCESS"
    else
        echo "$name: FAILURE $rc" >&2
    fi
    exit $rc
}

cluster_bootstrap() {
    hctl mero bootstrap --verbose

    # Display bootstrap progress, usually it completes under a minute.
    watch hctl mero status &
    sleep 90
    kill %watch
    reset  # `kill %watch` might have left the terminal broken

    local rc=0
    # Possible failure of m0t1fs has no impact on exit code of
    # `hctl mero bootstrap` command above.
    if hctl mero status | grep -q failed; then
        rc=1
    else
        _wait_for_m0t1fs
    fi

    hctl mero status
    return $rc
}

## Wait for m0t1fs to mount.
_wait_for_m0t1fs() {
    local steps_left=30
    set +x  # silence the loop
    echo -n 'Waiting for m0t1fs to mount...'
    while ! mount | grep -q m0t1fs; do
        sleep 2
        echo -n '.'
        ((--steps_left > 0)) || report_and_exit ${0##*/} 1
    done
    echo ' done'
    set -x
}

check_state() {
    [ $# -eq 2 ] || die "${FUNCNAME[0]}: Invalid usage"
    local expected="$1"
    local serial="$2"
    local actual

    actual=$(hctl debug print drive --serial $serial | sed -n 's/^  state: //p')
    [ "$actual" = "$expected" ]
}

wait_for_state() {
    [ $# -eq 2 ] || die "${FUNCNAME[0]}: Invalid usage"
    local state="$1"
    local serial="$2"

    set +x  # silence the loop
    until check_state "$@"; do
        :
    done
    set -x
    hctl mero status -d
}
