{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE StandaloneDeriving #-}

module RAS.Bindings.FailureNotification where

import Control.Monad
import Data.Aeson
import Data.Aeson.Schema.Choice
import Data.Aeson.Schema.Types
import Data.Aeson.Schema.Validator
import Data.Aeson.Types
import Data.Aeson.Types
import Data.Binary
import Data.Foldable
import Data.Functor
import Data.HashMap.Lazy
import Data.Hashable
import Data.Map
import Data.Maybe
import Data.Ratio
import Data.Text
import Data.Traversable
import Data.Typeable
import GHC.Base
import GHC.Classes
import GHC.Generics
import GHC.Show
import Prelude
import RAS.Bindings.Instances ()
import Text.Regex
import Text.Regex.PCRE.String

graph :: Data.Aeson.Schema.Types.Graph Data.Aeson.Schema.Types.Schema
                                       Data.Text.Text

graph = Data.Map.fromList [(Data.Text.pack "FailureNotification",
                            Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                          Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "message",
                                                                                                                                  Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "ras_message_header",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty),
                                                                                                                                                                                                                                       (Data.Text.pack "failure_notification_type",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "controller",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "disk",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty)],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaRequired = Prelude.True}),
                                                                                                                                                                                                                                       (Data.Text.pack "failure_notification_info",
                                                                                                                                                                                                                                        Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.ObjectType],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaProperties = Data.HashMap.Lazy.fromList [(Data.Text.pack "state",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "The state the device is in")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "failure_time",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "The time the failure happened")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "reason",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Failure description")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "reason_class",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice2of2 Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "wrong type"),
ata.Aeson.Types.String (Data.Text.pack "broken"),
ata.Aeson.Types.String (Data.Text.pack "teapot")]}],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Reason class of the failure")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "root_cause",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Cause for failure")}),
                                                                                                                                                                                                                                                                                                                                             (Data.Text.pack "enclosure_serial_number",
                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaType = [Data.Aeson.Schema.Choice.Choice1of2 Data.Aeson.Schema.Types.StringType],
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaRequired = Prelude.True,
                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Schema.Types.schemaDescription = GHC.Base.Just (Data.Text.pack "Serial number of the enclosure containing the device")})],
                                                                                                                                                                                                                                                                      Data.Aeson.Schema.Types.schemaRequired = Prelude.True})],
                                                                                                                                                                Data.Aeson.Schema.Types.schemaRequired = Prelude.True})],
                                                          Data.Aeson.Schema.Types.schemaId = GHC.Base.Just (Data.Text.pack "http://json-schema.org/draft-03/schema#"),
                                                          Data.Aeson.Schema.Types.schemaDSchema = GHC.Base.Just (Data.Text.pack "http://json-schema.org/draft-03/schema#")})]

data FailureNotificationMessageFailure_notification_type = FailureNotificationMessageFailure_notification_type
  { failureNotificationMessageFailure_notification_typeController :: GHC.Base.Maybe Data.Aeson.Types.Value
  , failureNotificationMessageFailure_notification_typeDisk :: GHC.Base.Maybe Data.Aeson.Types.Value
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary FailureNotificationMessageFailure_notification_type

instance Data.Hashable.Hashable FailureNotificationMessageFailure_notification_type

instance Data.Aeson.FromJSON FailureNotificationMessageFailure_notification_type
    where parseJSON (Data.Aeson.Types.Object obj) = do (GHC.Base.pure FailureNotificationMessageFailure_notification_type GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                   [] -> GHC.Base.return ()
                                                                                                                                                                                   es -> GHC.Base.fail GHC.Base.$ Prelude.unlines es);
                                                                                                                                                                              GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "controller") obj)) GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                                                                                                                                                                                           [] -> GHC.Base.return ()
                                                                                                                                                                                                                                                                                                                           es_1 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_1);
                                                                                                                                                                                                                                                                                                                      GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "disk") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON FailureNotificationMessageFailure_notification_type
    where toJSON (FailureNotificationMessageFailure_notification_type a1
                                                                      a2) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "controller") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a1,
                                                                                                                                                                            (,) (Data.Text.pack "disk") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a2])

data FailureNotificationMessageFailure_notification_info = FailureNotificationMessageFailure_notification_info
  { failureNotificationMessageFailure_notification_infoState :: Data.Text.Text -- ^ The state the device is in
  , failureNotificationMessageFailure_notification_infoFailure_time :: Data.Text.Text -- ^ The time the failure happened
  , failureNotificationMessageFailure_notification_infoReason :: Data.Text.Text -- ^ Failure description
  , failureNotificationMessageFailure_notification_infoReason_class :: Data.Aeson.Types.Value -- ^ Reason class of the failure
  , failureNotificationMessageFailure_notification_infoRoot_cause :: Data.Text.Text -- ^ Cause for failure
  , failureNotificationMessageFailure_notification_infoEnclosure_serial_number :: Data.Text.Text -- ^ Serial number of the enclosure containing the device
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary FailureNotificationMessageFailure_notification_info

instance Data.Hashable.Hashable FailureNotificationMessageFailure_notification_info

instance Data.Aeson.FromJSON FailureNotificationMessageFailure_notification_info
    where parseJSON (Data.Aeson.Types.Object obj) = do (((((GHC.Base.pure FailureNotificationMessageFailure_notification_info GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property state missing") (\val -> case val of
                                                                                                                                                                                                                           Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                           _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "state") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property failure_time missing") (\val -> case val of
                                                                                                                                                                                                                                                                                                                                                                                                                           Data.Aeson.Types.String str -> do GHC.Base.return str
                                                                                                                                                                                                                                                                                                                                                                                                                           _ -> GHC.Base.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "failure_time") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property reason missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "reason") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property reason_class missing") (\val -> do {Control.Monad.unless (val `Data.Foldable.elem` [Data.Aeson.Types.String (Data.Text.pack "wrong type"),
ata.Aeson.Types.String (Data.Text.pack "broken"),
ata.Aeson.Types.String (Data.Text.pack "teapot")]) (GHC.Base.fail "not one of the values in enum");
val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty{Data.Aeson.Schema.Types.schemaEnum = GHC.Base.Just [Data.Aeson.Types.String (Data.Text.pack "wrong type"),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Data.Aeson.Types.String (Data.Text.pack "broken"),
ata.Aeson.Types.String (Data.Text.pack "teapot")]} val of
ase.return ()
es_2 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_2);
ase.return val}) val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "reason_class") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property root_cause missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "root_cause") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property enclosure_serial_number missing") (\val -> case val of
ata.Aeson.Types.String str -> do GHC.Base.return str
ase.fail "not a string") (Data.HashMap.Lazy.lookup (Data.Text.pack "enclosure_serial_number") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON FailureNotificationMessageFailure_notification_info
    where toJSON (FailureNotificationMessageFailure_notification_info a1
                                                                      a2
                                                                      a3
                                                                      a4
                                                                      a5
                                                                      a6) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "state") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a1,
                                                                                                                                                                            (,) (Data.Text.pack "failure_time") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a2,
                                                                                                                                                                            (,) (Data.Text.pack "reason") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a3,
                                                                                                                                                                            (,) (Data.Text.pack "reason_class") Data.Functor.<$> (GHC.Base.Just GHC.Base.. GHC.Base.id) a4,
                                                                                                                                                                            (,) (Data.Text.pack "root_cause") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a5,
                                                                                                                                                                            (,) (Data.Text.pack "enclosure_serial_number") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.Types.String) a6])

data FailureNotificationMessage = FailureNotificationMessage
  { failureNotificationMessageRas_message_header :: GHC.Base.Maybe Data.Aeson.Types.Value
  , failureNotificationMessageFailure_notification_type :: FailureNotificationMessageFailure_notification_type
  , failureNotificationMessageFailure_notification_info :: FailureNotificationMessageFailure_notification_info
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary FailureNotificationMessage

instance Data.Hashable.Hashable FailureNotificationMessage

instance Data.Aeson.FromJSON FailureNotificationMessage
    where parseJSON (Data.Aeson.Types.Object obj) = do ((GHC.Base.pure FailureNotificationMessage GHC.Base.<*> Data.Traversable.traverse (\val -> do {(case Data.Aeson.Schema.Validator.validate graph Data.Aeson.Schema.Types.empty val of
                                                                                                                                                           [] -> GHC.Base.return ()
                                                                                                                                                           es_3 -> GHC.Base.fail GHC.Base.$ Prelude.unlines es_3);
                                                                                                                                                      GHC.Base.return val}) (Data.HashMap.Lazy.lookup (Data.Text.pack "ras_message_header") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property failure_notification_type missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "failure_notification_type") obj)) GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property failure_notification_info missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "failure_notification_info") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON FailureNotificationMessage
    where toJSON (FailureNotificationMessage a1
                                             a2
                                             a3) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "ras_message_header") Data.Functor.<$> GHC.Base.fmap GHC.Base.id a1,
                                                                                                                                                   (,) (Data.Text.pack "failure_notification_type") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.toJSON) a2,
                                                                                                                                                   (,) (Data.Text.pack "failure_notification_info") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.toJSON) a3])

data FailureNotification = FailureNotification
  { failureNotificationMessage :: FailureNotificationMessage
  } deriving (GHC.Classes.Eq, GHC.Show.Show, GHC.Generics.Generic, Data.Typeable.Typeable)


instance Data.Binary.Binary FailureNotification

instance Data.Hashable.Hashable FailureNotification

instance Data.Aeson.FromJSON FailureNotification
    where parseJSON (Data.Aeson.Types.Object obj) = do GHC.Base.pure FailureNotification GHC.Base.<*> Data.Maybe.maybe (GHC.Base.fail "required property message missing") Data.Aeson.parseJSON (Data.HashMap.Lazy.lookup (Data.Text.pack "message") obj)
          parseJSON _ = GHC.Base.fail "not an object"

instance Data.Aeson.ToJSON FailureNotification
    where toJSON (FailureNotification a1) = Data.Aeson.Types.Object GHC.Base.$ (Data.HashMap.Lazy.fromList GHC.Base.$ Data.Maybe.catMaybes [(,) (Data.Text.pack "message") Data.Functor.<$> (GHC.Base.Just GHC.Base.. Data.Aeson.toJSON) a1])