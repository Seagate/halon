#!/usr/bin/env bash
set -eu -o pipefail
# set -x
export PS4='+ [${FUNCNAME[0]:+${FUNCNAME[0]}:}${LINENO}] '

### ------------------------------------------------------------------
### Halon helper script
###
### Installation:
###     ln -s /path/to/halon/scripts/h0 ~/bin/h0
###
### Type `h0 help' for usage.
### ------------------------------------------------------------------

umask 0002
ulimit -c unlimited

usage() {
    cat <<EOF
Usage: $PROG {COMMAND [OPTION]...}...

Info commands:
    path    Show paths to Halon executables and Mero libraries.
    status  Show status of halond, LNet and mero-kernel.
    hosts   Show comma-separated list of cluster nodes (multi-node
            configuration only; see M0_CLUSTER below).
    help    Show this help and exit.

Development commands:
    make [OPTION]...     Build Halon. If Mero was updated, use \`rebuild'
                         command.
    rebuild [OPTION]...  Clean 'rpclite' module and build Halon.
    test [OPTION]...     Run Halon unit tests (see 'Examples').
    run-st [-l] [PATTERN]...
                         Run or list ('-l') system tests. Optional arguments
                         (glob PATTERNs) specify which tests to run.
    clean [OPTION]...    Clean local packages.

Cluster commands:
    init     Install Mero and Halon systemd services; start halond(s);
             generate facts file.
    fini     Stop halond(s); unload Mero kernel modules; erase cluster data,
             metadata and configuration files; uninstall Mero and Halon
             systemd services.

Options:
    'make', 'rebuild', 'test', and 'clean' commands support options of the
    Haskell Tool Stack.  Type \`stack build --help' or
    \`stack clean --help' for documentation.

Environment variables:
    M0_SRC_DIR  Path to Mero sources directory; defaults to
                '$DEFAULT_M0_SRC_DIR'.
    M0_CLUSTER  Path to YAML file with initial cluster configuration;
                defaults to '$DEFAULT_M0_CLUSTER'.
                Leave unset or empty for single-node configuration.
                See '$M0_SRC_DIR/utils/m0genfacts -h' for the
                description of configuration file format.
    GHC_OPTS    Extra options for ghc; defaults to '$DEFAULT_GHC_OPTS'.

Examples:

    # Run 'RC*' tests of 'mero-halon' package.
    $PROG test mero-halon --ta '-p RC'

    $PROG test --help

    $PROG make --no-test --dry-run

    pdsh -w \$(M0_CLUSTER=cluster.yaml $PROG hosts) pgrep m0d
EOF
}

## -------------------------------------------------------------------
## Info commands

cmd_path() {
    assert_mero libs
    [ -d ~/.stack ] ||
        die "Stack environment is not configured. Run \`stack setup' first."
    echo "halon-bin: $(stack path --local-install-root)/bin"
    echo "mero-libs: $M0_SRC_DIR/mero/.libs"
}

cmd_status() {
    check_ssh_accessibility

    mpdsh sudo systemctl status halond
    mpdsh sudo lctl list_nids
    mpdsh sudo systemctl status mero-kernel
}

cmd_hosts() {
    [[ -z $M0_CLUSTER_HOSTS ]] || echo $M0_CLUSTER_HOSTS
}

cmd_help() {
    local ret=${1:-0}

    [[ $ret == 0 ]] && usage || usage >&2
    exit $ret
}

## -------------------------------------------------------------------
## Development commands

cmd_make() {
    stack_build --test --no-run-tests "$@"
}

cmd_rebuild() {
    # XXX The script should be able to determine automatically
    # whether Mero has been updated since last Halon compilation.
    # One possible solution is to reimplement this script as a Makefile.
    stack clean rpclite
    cmd_make "$@"
}

cmd_test() {
    assert_mero libs
    LD_LIBRARY_PATH=$M0_SRC_DIR/mero/.libs \
        stack_build --test "$@"
    # Here we are using the fact that `stack test` is a shortcut for
    # `stack build --test`.
}

cmd_run_st() {
    local list_p=0
    local pattern
    local f

    if [[ ${1:-} == '-l' ]]; then
        list_p=1
        shift
    fi

    export H0_SRC_DIR SUDO M0_CLUSTER  # export variables used by system tests
    for pattern in ${@:-t_*}; do
        find "$H0_SRC_DIR/st/" -maxdepth 1 \! -type d -name $pattern \
             -perm +a=x -print | sort |
            while read f; do
                if [ $list_p -eq 1 ]; then
                    echo ${f##*/}
                else
                    echo "<< ${f##*/} >>" >&2
                    _time $f || return $?
                fi
            done
    done
}

cmd_clean() {
    stack clean "$@"
}

## -------------------------------------------------------------------
## Cluster commands

cmd_init() {
    check_ssh_accessibility
    prelink_executables

    # Install systemd services.
    local quiet=--quiet
    [[ -v M0_VERBOSE ]] && quiet=''
    mpdsh sudo $M0_SRC_DIR/scripts/install-mero-service --link $quiet
    mpdsh sudo $H0_SRC_DIR/scripts/install-halon-services --link $quiet

    erase_cluster_data

    mpdsh sudo systemctl start halond

    # Generate facts file.
    if [[ -n $M0_CLUSTER ]]; then
        [[ -d /etc/halon ]] || sudo mkdir /etc/halon
        sudo $M0_SRC_DIR/utils/m0genfacts ${M0_VERBOSE:+--verbose} \
             --config $M0_CLUSTER -o /etc/halon/halon_facts.yaml \
             --netif eth1  # XXX Can we get rid of hard-coded `eth1'?
    else
        sudo $M0_SRC_DIR/utils/m0setup --halon-facts --clovis-apps \
             ${M0_VERBOSE:+--verbose}
    fi
}

cmd_fini() {
    check_ssh_accessibility || true

    mpdsh sudo systemctl stop halond || true
    # Unload Mero kernel modules.
    mpdsh sudo systemctl stop mero-kernel || true
    erase_cluster_data

    local quiet=--quiet
    [[ -v M0_VERBOSE ]] && quiet=''
    mpdsh sudo $M0_SRC_DIR/scripts/install-mero-service --uninstall $quiet
    mpdsh sudo $H0_SRC_DIR/scripts/install-halon-services --uninstall $quiet
}

## -------------------------------------------------------------------
## Utility functions

_time() {
    if [[ -x /usr/bin/time ]]; then
        /usr/bin/time "$@"
    else
        time "$@"
    fi
}

_exec() {
    [[ $1 =~ ^cmd_(path|status|hosts)$ ]] || echo "----- ${@#cmd_} -----" >&2
    "$@"
}

## We could have exported `h0 build` command, but don't do so
## for the following reasons:
##   1. The difference between `h0 make` and `h0 build` would be hard to
##      explain. The users would be confused if both commands were present
##      in the CLI.
##   2. `h0 make` is used by CI.
##   3. `h0 make` is symmetrical to `m0 make`.
##
## Still, if we ever need this function to be exported, we better export
## `h0 stack` instead.
stack_build() {
    assert_mero libs
    PKG_CONFIG_PATH=$M0_SRC_DIR \
        stack \
            --extra-include-dirs="$M0_SRC_DIR" \
            --extra-lib-dirs="$M0_SRC_DIR/mero/.libs" \
            build \
                --ghc-options="$GHC_OPTS" \
                "$@"
    $H0_SRC_DIR/mero-halon/scripts/visualize-schema/genhtml \
        >$H0_SRC_DIR/doc/halon-rg-schema.html

}

## Maybe pdsh.
mpdsh() {
    if [[ -n $M0_CLUSTER ]]; then
        pdsh -S -f1 -w $M0_CLUSTER_HOSTS "$@"
    else
        "$@"
    fi
}

assert_mero() {
    [[ -d $M0_SRC_DIR ]]      || die "$M0_SRC_DIR: No such directory"
    [[ -d $M0_SRC_DIR/mero ]] || die "$M0_SRC_DIR: No Mero sources found"
    if [[ $# > 0 ]]; then
        [[ -x $M0_SRC_DIR/mero/.libs/m0d ]] ||
            die "$M0_SRC_DIR: Mero is not built"
    fi
}

check_ssh_accessibility() {
    [[ -n $M0_CLUSTER ]] || return 0

    local kh=~/.ssh/known_hosts
    touch $kh
    chmod 0600 $kh

    local host=
    for host in ${M0_CLUSTER_HOSTS//,/ }; do
        pdsh -S -w $host true &>/dev/null || {
            # Remove all keys belonging to $host to avoid duplicates.
            ssh-keygen -f $kh -R $host >/dev/null
            rm -f $kh.old
            ssh-keyscan -t rsa $host >>$kh
        }
        pdsh -S -w $host true || die "$host is not accessible"
    done
}

prelink_executables() {
    [[ -n $M0_CLUSTER ]] || return 0

    # Libtool-based executables are linked on the first run.
    # In m0vg setup only `cmu` host can do the linking.
    # If any of these executables is started on other (non-cmu)
    # host first, it will fail.
    local exe
    for exe in dix/utils/m0dixinit \
               mero/m0d \
               utils/mkfs/m0mkfs \
               utils/trace/m0traced \
               utils/trace/m0tracedump; do
        $M0_SRC_DIR/$exe -h &>/dev/null || true
    done
}

erase_cluster_data() {
    mpdsh sudo $M0_SRC_DIR/utils/m0setup --cleanup --halon-facts
    mpdsh sudo systemctl start halon-cleanup || true
    mpdsh sudo systemctl start mero-cleanup || true

    # `/var/mero` directory cannot be deleted on Jenkins CI nodes,
    # because it is a mountpoint there. You'll get this error message:
    #
    #   rm: cannot remove ‘/var/mero/’: Device or resource busy
    mpdsh sudo rm -rvf /var/mero/ || true
}

## Outputs comma-separated list of cluster hosts iff $M0_CLUSTER is set
## and its value is a path to readable file.
cluster_hosts() {
    if [[ -n ${M0_CLUSTER:-} && -r $M0_CLUSTER ]]; then
        cat $M0_CLUSTER | python -c '
from __future__ import print_function
import sys
import yaml

cfg = yaml.safe_load(sys.stdin)
hosts = set()
hosts.update(cfg.get("confds", []))
hosts.update(cfg.get("clients", []))
hosts.update(cfg.get("clovis-apps", []))
hosts.update(cfg.get("s3servers", []))
hosts.update(x["host"] for x in cfg.get("ssus", []))
print(",".join(hosts))
'
    fi
}

init_vars() {
    PROG="${0##*/}"
    SUDO="${SUDO-sudo -E}"  # the absence of ':' is important
    H0_SRC_DIR="$(readlink -f $0)"
    H0_SRC_DIR="${H0_SRC_DIR%/*/*}"
    . $H0_SRC_DIR/scripts/functions

    DEFAULT_M0_SRC_DIR=${H0_SRC_DIR%/*}/mero
    export M0_SRC_DIR=${M0_SRC_DIR:-$DEFAULT_M0_SRC_DIR}

    ## Optimizations are turned off (-O0) by default for faster compilation.
    ## To enable optimizations, the user should set GHC_OPTS explicitly,
    ## e.g.,
    ##
    ##     GHC_OPTS='-g -j2' ./scripts/h0 rebuild
    ##
    ## NB: `stack build --fast` is equivalent to
    ##     `stack build --ghc-options=-O0`.
    DEFAULT_GHC_OPTS='-g -j2 -O0'
    GHC_OPTS=${GHC_OPTS:-$DEFAULT_GHC_OPTS}

    DEFAULT_M0_CLUSTER=~/.m0-cluster.yaml
    M0_CLUSTER="${M0_CLUSTER-$DEFAULT_M0_CLUSTER}"  # note the absence of ':'
    if [[ -n $M0_CLUSTER ]]; then
        if [[ ! -r $M0_CLUSTER ]]; then
            M0_CLUSTER=
        elif [[ -z $(sed -r -e 's/#.*$//' -e 's/^ +//' $M0_CLUSTER |
                         tr -d \\n) ]]; then
            ## No data.
            M0_CLUSTER=
        fi
    fi
    M0_CLUSTER_HOSTS="$(cluster_hosts)"
}

## -------------------------------------------------------------------
## main

init_vars

case "${1:-}" in
    help|-h|--help) cmd_help 0;;
    '') cmd_help 1;;
esac

cd "$H0_SRC_DIR"

CMD=
OPTS=()
while [[ $# > 0 ]]; do
    case "$1" in
        path|status|hosts|help|make|rebuild|test|run-st|clean|init|fini)
            [[ -z $CMD ]] || {
                if [[ ${#OPTS[@]} == 0 ]]; then
                    _exec $CMD
                else
                    _exec $CMD "${OPTS[@]}"
                fi
            }
            CMD=cmd_${1//-/_}
            OPTS=();;
        *)
            [[ -n $CMD ]] || {
                echo "Invalid command: $1" >&2
                die "Type \`$PROG help' for usage."
            }
            OPTS+=("$1");;
    esac
    shift
done

if [[ ${#OPTS[@]} == 0 ]]; then
    _exec $CMD
else
    _exec $CMD "${OPTS[@]}"
fi
