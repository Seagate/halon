#!/bin/bash

# This script is based on the isntall-mero-services-script from mero sources.

readonly BASENAME="${0##*/}"

H0_SRC_DIR="$(readlink -f $0)"
H0_SRC_DIR="${H0_SRC_DIR%/*/*}"

# variables
dry_run=false
link_files=false
action='install'
verbose=true

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Install systemd scripts for development or testing use.
Usage: $BASE_NAME [-h|--help] [-n|--dry-run] [-u|--uninstall]

    -n|--dry-run    Don't perform any action, just show what would be
                    installed/uninstalled.

    -q|--quiet      Suppress detailed output.

    -l|--link       Symlink files instread of copying them.

    -u|--uninstall  Remove files and directories witch were installed by this script

    -h|--help       Print this help.
USAGE_END
}

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt -o hnqlu --long help,dry-run,quiet,link,uninstall -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -n|--dry-run)       dry_run=true; shift ;;
            -q|--quiet)         verbose=false; shift ;;
            -l|--link)          link_files=true; shift ;;
            -u|--uninstall)     action=uninstall; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}

#
# Utility functions
#

die()
{
    echo "$@" >&2
    exit 1
}

warn()
{
    echo "WARNING: $@" >&2
}

run()
{
    local cmd="$*"

    $dry_run && echo $cmd
    $dry_run || $cmd
}

home_of()
{
    eval echo ~${1:-$USER}
}

h0_path()
{
    local component=$1

    # When this script is executed with `sudo`, a target user (presumably root)
    # won't have environment. The `stack` utility, called internally by `h0`
    # script, will attempt to download it's runtime (which is quite big in size)
    # into $HOME/.stack first; to avoid this we just create a symlink to the
    # existing 'stack' environment of original user who calls `sudo`.
    if [[ -n $SUDO_USER ]] ; then
        # Unfortunately, using of infamous `eval` in this case is the only sane
        # way of obtaining homedir for a user whose name is stored in a variable,
        # because of the order in which shell performs expansion (tilde
        # expansion goes before parameter substitution), an alternative would be
        # direct reading and parsing of '/etc/passwd' file.
        [[ -d $(home_of $USER)/.stack ]] ||
            ln -sf $(home_of $SUDO_USER)/.stack $(home_of $USER/).stack
    fi

    local path=$(echo $($H0_SRC_DIR/scripts/h0 path 2>/dev/null |
                        grep $component | awk '{print $2}'))

    # nodes where neither `stack setup` nor `h0 setup` has been done won't
    # have '~/.stack' dir, in which case the above `h0 path` command won't work,
    # so we just trying to guess the location and fail if it's not found
    if [[ -z $path ]] ; then
        case $component in
            halon-bin)
                path=$(ls -d $H0_SRC_DIR/.stack-work/install/x86_64-linux/lts-*/*/bin)
                ;;
            mero-libs)
                path=$(ls -d $H0_SRC_DIR/../mero/mero/.libs)
                ;;
        esac
    fi

    [[ -n $path ]] ||
        die "Not able to find '$component' location"

    echo $path
}

install_files()
{
    local v='-v'
    $verbose || v=''

    local cmd="cp -f ${v}"
    if $link_files ; then
        cmd="ln -sf ${v}"
    fi

    local file
    local dir='/usr/lib/systemd/system'
    for file in 'systemd/halond.service' \
                'systemd/halon-satellite.service' \
                'systemd/halon-cleanup.service' ;
    do
        run "$cmd $H0_SRC_DIR/$file $dir"
    done

    dir='/etc/sysconfig'
    # always copy configs
    run "cp ${v} -f $H0_SRC_DIR/systemd/sysconfig/halond.example $dir/halond"
    run "cp ${v} -f $H0_SRC_DIR/systemd/sysconfig/halon-satellite $dir"
    # example output of `ip address` command that is parsed below
    #   3: eth1    inet 172.28.128.94/24 brd 172.28.128.255 scope global dynamic eth1...
    local ip_addr=$(ip -oneline -4 address show eth1 |
                    awk '{print $4}' | cut -d/ -f1)
    run "sed -i -r s/^#(HALOND_LISTEN=).*(:[[:digit:]]+)$/\1${ip_addr}\2/ $dir/halond"

    dir='/etc/ld.so.conf.d'
    $dry_run || echo "$(h0_path mero-libs)" > "$dir/mero.conf"

    dir='/etc/halon'
    [[ -d $dir ]] || run "mkdir ${v} -p $dir"
    run "$cmd $H0_SRC_DIR/mero-halon/scripts/halon_roles.yaml $dir/halon_role_mappings"
    run "$cmd $H0_SRC_DIR/mero-halon/scripts/mero_clovis_role_mappings.ede $dir/mero_role_mappings"

    dir='/etc/halon/role_maps'
    [[ -d $dir ]] || run "mkdir ${v} -p $dir"
    run "$cmd $H0_SRC_DIR/mero-halon/scripts/mero_provisioner_role_mappings.ede $dir/prov.ede"
    run "$cmd $H0_SRC_DIR/mero-halon/scripts/mero_clovis_role_mappings.ede $dir/clovis.ede"

    dir='/usr/bin'
    local halon_bin_dir=$(h0_path halon-bin)
    for file in "$halon_bin_dir/halond" \
                "$halon_bin_dir/halonctl" \
                "$H0_SRC_DIR/mero-halon/scripts/hctl" ;
    do
        [[ -s $file ]] &&
            run "$cmd $file $dir" ||
            warn "skipping non-existing file '$file'"
    done

    dir='/usr/libexec/halon'
    [[ -d $dir ]] || run "mkdir ${v} -p $dir"
    file="$halon_bin_dir/halon-cleanup"
    [[ -s $file ]] &&
        run "$cmd $file $dir" ||
        warn "skipping non-existing file '$file'"

    dir='/var/lib/halon'
    [[ -d $dir ]] || run "mkdir ${v} -p $dir"

    $dry_run || {
        systemctl daemon-reload
        ldconfig
    }
}

uninstall_files()
{
    local v='-v'
    $verbose || v=''

    local files='
                 /etc/ld.so.conf.d/mero.conf
                 /etc/sysconfig/halon-satellite
                 /etc/sysconfig/halond
                 /usr/bin/halonctl
                 /usr/bin/halond
                 /usr/bin/hctl
                 /usr/lib/systemd/system/halon-cleanup.service
                 /usr/lib/systemd/system/halon-satellite.service
                 /usr/lib/systemd/system/halond.service
                 /usr/libexec/halon/halon-cleanup
                '
    local file
    for file in $files ; do
        run "rm ${v} -f $file"
    done

    local dirs='
                /etc/halon
                /usr/libexec/halon
                /var/lib/halon
               '
    local dir
    for dir in $dirs ; do
        [[ ! -d $dir  ]] || run "rm ${v} -rf $dir"
    done

    $dry_run || {
        systemctl daemon-reload
        ldconfig
    }
}

#
# Main
#

# exit immediately if any command exits with non-zero status
set -eE -o pipefail

parse_cli_options $@

if ! $dry_run && [[ $UID -ne 0 ]]; then
    die 'Error: Please, run this script with "root" privileges or use' \
        '-n|--dry-run option.'
fi

case $action in
    install)    install_files ;;
    uninstall)  uninstall_files ;;
    *)          die "Error: unknown action '$action'." ;;
esac

